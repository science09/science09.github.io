<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[彼岸-未来的博客]]></title>
  <subtitle><![CDATA[一分耕耘一分收获]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://science09.github.io/"/>
  <updated>2016-03-30T14:34:13.174Z</updated>
  <id>http://science09.github.io/</id>
  
  <author>
    <name><![CDATA[science09]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[RxAndroid入门指南]]></title>
    <link href="http://science09.github.io/2016/03/30/RxAndroid%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://science09.github.io/2016/03/30/RxAndroid入门指南/</id>
    <published>2016-03-30T14:29:38.000Z</published>
    <updated>2016-03-30T14:34:13.174Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_Rx概念介绍">1. Rx概念介绍</h2><p>Reactive是一种编程思想，Reactive编程就是异步数据流的编程，基于事件的编程</p>
<p><strong>一切皆流</strong></p>
<p>一个流是将要发生的有序序列事件的一部分。<br>你可以创建任何事物的数据流。任何事物都可以是流：变量，用户输入，属性 ，缓存，数据结构等等<br><a id="more"></a><br>它可以发出三种不同的事件：value，error或者completed</p>
<p>流（Observable）是被观察的对象。对于流的监听被称作订阅。我们定义的函数被称作观察者。</p>
<p>Rx扩展(Rxjava,RxJs,RxScala)提供了一个用于创建，变换，连接，过滤任何流的函数库。不仅某个流可以用于另一个流的输入，多个流同样可以作为其它流的输入。你也可以合并两个流。如果你对某些事件感兴趣，也可以通过对一个流的过滤获得另一个目标流。也可以将一个流中的数据映射到一个新的数据流。</p>
<h4 id="优点">优点</h4><ul>
<li>简洁</li>
<li>抽象层次高，你可以聚焦于定义业务逻辑的事件依赖，而不是大量的实现细节</li>
<li>有效避免callback hell，更少的中间状态变量</li>
</ul>
<h4 id="缺点">缺点</h4><ul>
<li>代码抽象层次高，真正使用Rx思想解决问题需要一个过程</li>
<li>对于android来说，包比较大，方法数也不少</li>
</ul>
<h4 id="适用场景">适用场景</h4><p>异步 ？<br>线程切换 ？<br>事件组合？（多个请求和UI操作组合）</p>
<p>EveryWhere<br>Rx是一种思想，这里的一切都是流，你可以定义任何事物的流，可以是事件，可以是数据结构，任意发挥你的想象，通过Rx的方式来解决问题。（Twitter suggestion的实现）</p>
<h4 id="Callback_Hell">Callback Hell</h4><p>比如有一个链式请求调用，你首先需要根据第一个请求的结果去判断下一步的操作。那么就要处理多个请求的回调。不管是正确还是错误，你总需要通过callback处理。无形中多了不少代码量，创建了变量，浪费了内存，同时增加了错误的可能性。</p>
<h2 id="2-_通过RxJava创建一条完整的事件链">2. 通过RxJava创建一条完整的事件链</h2><p><strong>被观察者</strong><br>Observable，对应我们上面所说的流，任何事物：数据，事件</p>
<p><strong>订阅者</strong><br>Observer，Subcreiber</p>
<h3 id="2-1_简单的创建">2.1 简单的创建</h3><h4 id="2-1-1_创建_Observer">2.1.1 创建 Observer</h4><p>Observer 即观察者，它决定事件触发的时候将有怎样的行为。 RxJava 中的 Observer 接口的实现方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>除了 Observer 接口之外，RxJava 还内置了一个实现了 Observer 的抽象类：Subscriber。<br>Subscriber是对Observer接口的扩展，但它们的基本使用方式是完全一样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Subscriber subscriber = <span class="keyword">new</span> Subscriber() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Observer和Subscriber不仅基本使用方式一样，实质上，在 RxJava 的 subscribe 过程中，Observer 也总是会先被转换成一个 Subscriber 再使用。所以如果你只想使用基本功能，选择 Observer 和 Subscriber 是完全一样的。对于使用者来说它们的区别主要有两点：</p>
<p><strong>onStart()</strong><br>这是 Subscriber 增加的方法。它会在 subscribe 刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法，具体可以在后面的文中看到。</p>
<p><strong>unsubscribe()</strong><br>这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用unsubscribe() 来解除引用关系，以避免内存泄露的发生。</p>
<h4 id="2-1-2_创建_Observable">2.1.2 创建 Observable</h4><p>Observable 即被观察者，我更倾向于叫它“流”。因为任何事物都可以是流，而不限于数据。你可以对流做任何想做的处理，转换，过滤，合并等等。 RxJava 使用 create() 方法来创建一个 Observable ，并为它定义事件触发规则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;String&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span></span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里传入了一个 OnSubscribe 对象作为参数。OnSubscribe 会被存储在返回的 Observable 对象中，它的作用相当于一个计划表，定义要执行的事件，当 Observable 被订阅的时候，OnSubscribe 的 call() 方法会自动被调用，事件序列就会依照设定依次触发。</p>
<p>创建Rx队列<br>create() 方法是 RxJava 最基本的创造事件序列的方法。基于这个方法， RxJava 还提供了一些方法用来快捷创建事件队列，例如：</p>
<p>just(T…): 将传入的参数依次发送出来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable observableSequece = Observable.just(<span class="string">"Hello"</span>, <span class="string">"Hi"</span>, <span class="string">"Aloha"</span>);</span><br><span class="line"><span class="comment">// 将会依次调用：</span></span><br><span class="line"><span class="comment">// onNext("Hello");</span></span><br><span class="line"><span class="comment">// onNext("Hi");</span></span><br><span class="line"><span class="comment">// onNext("Aloha");</span></span><br><span class="line"><span class="comment">// onCompleted();</span></span><br></pre></td></tr></table></figure>
<p>from(T[]) / from(Iterable&lt;? extends T&gt;) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String[] words = &#123;<span class="string">"Hello"</span>, <span class="string">"Hi"</span>, <span class="string">"Aloha"</span>&#125;;</span><br><span class="line">Observable observableFromSequece = Observable.from(words);</span><br><span class="line"><span class="comment">// 将会依次调用：</span></span><br><span class="line"><span class="comment">// onNext("Hello");</span></span><br><span class="line"><span class="comment">// onNext("Hi");</span></span><br><span class="line"><span class="comment">// onNext("Aloha");</span></span><br><span class="line"><span class="comment">// onCompleted();</span></span><br></pre></td></tr></table></figure>
<p>上面 just(T…) 的例子和 from(T[]) 的例子，都和之前的 create(OnSubscribe) 的例子是等价的。</p>
<h4 id="2-1-3_Subscribe_(订阅)">2.1.3 Subscribe (订阅)</h4><p>通过subscribe() 将 Observable 和 Observer 联结起来，形成了一个完整的事件监听和回调：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(observer);</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line">observable.subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p>当subscribe，onSubscribe就开始执行了。</p>
<h3 id="2-2_自定义回调_——_Action">2.2 自定义回调 —— Action</h3><p>有时你不需要关心所有的回调onNext，onComplete或onError，那么可以针对感兴趣的事件进行监听：RxJava 会自动根据定义创建出Subscriber 。形式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="comment">// onNext()</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="comment">// onError()</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Error handling</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">    <span class="comment">// onCompleted()</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义onNext()</span></span><br><span class="line">observable.subscribe(onNextAction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure>
<p><strong>Action0</strong><br>RxJava 的一个接口，它只有一个方法 <code>call()</code>，这个方法是无参无返回值的；由于 <code>onCompleted()</code> 方法也是无参无返回值的，因此 Action0 可以被当成一个包装对象，将 <code>onCompleted()</code> 的内容打包起来将自己作为一个参数传入 <code>subscribe()</code> 以实现不完整定义的回调。这样其实也可以看做将 <code>onCompleted()</code> 方法作为参数传进了<code>subscribe()</code>，相当于其他某些语言中的『闭包』。</p>
<p><strong>Action1</strong><br>也是一个接口，它同样只有一个方法 <code>call(T param)</code>，这个方法也无返回值，但有一个参数；与 Action0 同理，由于 <code>onNext(T obj)</code> 和 <code>onError(Throwable error)</code> 也是单参数无返回值的，因此 Action1可以将 <code>onNext(obj)</code> 和 <code>onError(error)</code> 打包起来传入 <code>subscribe()</code> 以实现不完整定义的回调。事实上，虽然 Action0 和 Action1在 API 中使用最广泛，但 RxJava 是提供了多个 ActionX 形式的接口 (例如 Action2, Action3) 的，它们可以被用以包装不同的无返回值的方法。</p>
<h2 id="3-_线程控制_——_Scheduler">3. 线程控制 —— Scheduler</h2><p>在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler （调度器）。</p>
<h3 id="3-1_Scheduler_API">3.1 Scheduler API</h3><h4 id="3-1-1_Scheduler">3.1.1 Scheduler</h4><p>在RxJava 中，Scheduler —— 调度器，相当于线程控制器，通过它可以指定每一段代码应该运行在什么样的线程。RxJava 已经内置了几种Scheduler ，它们已经适合大多数的使用场景：</p>
<ul>
<li><p>Schedulers.immediate()<br>相当于不指定线程，直接在当前线程运行，这是默认的 Scheduler。</p>
</li>
<li><p>Schedulers.newThread():<br>总是启用新线程，并在新线程执行操作。</p>
</li>
<li><p>Schedulers.io()<br>I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</p>
</li>
<li><p>Schedulers.computation()<br>计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</p>
</li>
<li><p>AndroidSchedulers.mainThread()<br>Android 专用的scheduler ，它指定操作在 Android 主线程运行。</p>
</li>
</ul>
<h4 id="3-1-2_线程切换">3.1.2 线程切换</h4><p>可以通过 subscribeOn() 和 observeOn() 两个方法来对线程进行控制了。</p>
<ul>
<li><p>subscribeOn()<br>指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。</p>
</li>
<li><p>observeOn()<br>指定 Subscriber 所运行在的线程。看名字，observeOn：观察者所在的线程。或者叫做事件消费的线程。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">        @<span class="function">Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">            Log.d(tag, <span class="string">"number:"</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>上面这段代码中，由于 subscribeOn(Schedulers.io()) 的指定，被创建的事件的内容 1、2、3、4 将会在 IO 线程发出；而由于observeOn(AndroidScheculers.mainThread()) 的指定，因此 subscriber 数字的打印将发生在主线程 。事实上，这种在subscribe() 之前写上subscribeOn(Scheduler.io()) 和 observeOn(AndroidSchedulers.mainThread()) 的使用方式非常常见，它适用于多数的 『后台线程取数据，主线程显示』的程序策略。</p>
<p>那么，加载图片将会发生在 IO 线程，而设置图片则被设定在了主线程。这就意味着，即使加载图片耗费了几十甚至几百毫秒的时间，也不会造成丝毫界面的卡顿。</p>
<h2 id="4-_操作符">4. 操作符</h2><p>你可以对流进行各种处理：过滤，链接，合并，转换等等。</p>
<h3 id="4-1_map变换">4.1 map变换</h3><p>事件对象的直接变换，具体功能上面已经介绍过。它是 RxJava 最常用的变换。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"images/logo.png"</span>) <span class="comment">// 输入类型 String</span></span><br><span class="line">.map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Bitmap <span class="title">call</span><span class="params">(String filePath)</span> </span>&#123; <span class="comment">// 参数类型 String</span></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">getBitmapFromPath</span><span class="params">(filePath)</span></span>; <span class="comment">// 返回类型 Bitmap</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123; <span class="comment">// 参数类型 Bitmap</span></span><br><span class="line">        showBitmap(bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面出现的Func1 和 Action1 非常相似，也是 RxJava 的一个接口，用于包装含有一个参数的方法。</p>
<blockquote>
<p>FuncX 和ActionX 的区别<br>FuncX 包装的是有返回值的方法。</p>
</blockquote>
<p>可以看到，map() 方法将参数中的 String 对象转换成一个 Bitmap 对象后返回，而在经过 map() 方法后，事件的参数类型也由 String转为了 Bitmap。可以看到在subscribe处理的Action的参数已经就是bitmap了。</p>
<blockquote>
<p>Rx扩展(Rxjava,RxJs,RxScala)提供了一个用于创建，变换，连接，过滤任何流的函数库。不仅某个流可以用于另一个流的输入，多个流同样可以作为其它流的输入。你也可以合并两个流。如果你对某些事件感兴趣，也可以通过对一个流的过滤获得另一个目标流。也可以将一个流中的数据映射到一个新的数据流。</p>
</blockquote>
<h3 id="4-2_flatMap()">4.2 flatMap()</h3><p>Observable.flatMap()接收一个Observable的输出作为输入，同时输出另外一个Observable。可以用于实现一对多的变换。</p>
<p>这是一个很有用但非常难理解的变换，首先假设这么一种需求：假设有一个数据结构『学生』，现在需要打印出一组学生的名字。实现方式很简单：</p>
<p><strong>打印所有学生的name</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Student[] students = ...;</span><br><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, name);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Observable.from(students)</span><br><span class="line">.map(<span class="keyword">new</span> Func1&lt;Student, String&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> student.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p><strong>打印所有学生的所有courseName</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Student[] students = ...;</span><br><span class="line">Subscriber&lt;Student&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        List&lt;Course&gt; courses = student.getCourses();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; courses.size(); i++) &#123;</span><br><span class="line">            Course course = courses.get(i);</span><br><span class="line">            Log.d(tag, course.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">Observable.from(students)</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p>看上去实现了我们需要的功能，但是subscriber不该去做数据处理的工作，真正的工作应该只做响应。而数据处理应该放在Observable中，这时候就要引入flatMap：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Student[] students = ...;</span><br><span class="line">Subscriber&lt;Course&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</span><br><span class="line">    @<span class="function">Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span>(<span class="params">Course course</span>) </span>&#123;</span><br><span class="line">        Log.d(tag, course.getName());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">Observable.<span class="keyword">from</span>(students)</span><br><span class="line">.flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">    @<span class="function">Override</span><br><span class="line">    <span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span>(<span class="params">Student student</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.<span class="keyword">from</span>(student.getCourses());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p>flatMap() 和 map() 有一个相同点：它也是把传入的参数转化之后返回另一个对象。但需要注意，和 map() 不同的是， flatMap() 中返回的是个 Observable 对象，并且这个 Observable 对象并不是被直接发送到了 Subscriber 的回调方法中。</p>
<p><strong>flatMap() 的原理</strong></p>
<ul>
<li>使用传入的事件对象创建一个 Observable 对象</li>
<li>并不发送这个 Observable，而是将它激活，于是它开始发送事件</li>
<li>每一个创建出来的 Observable 发送的事件，都被汇入同一个 Observable ，而这个 Observable 负责将这些事件统一交给 Subscriber 的回调方法。</li>
</ul>
<p>这三个步骤，把事件拆成了两级，通过一组新创建的 Observable 将初始的对象『铺平』之后通过统一路径分发了下去。而这个『铺平』就是 flatMap() 所谓的 flat。</p>
<p>扩展：由于可以在嵌套的 Observable 中添加异步代码， flatMap() 也常用于嵌套的异步操作，例如嵌套的网络请求。示例代码（Retrofit + RxJava）：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">networkClient.token() <span class="comment">// 返回 Observable&lt;String&gt;，在订阅时请求 token，并在响应后发送 token</span></span><br><span class="line">.flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;Messages&gt;&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Observable&lt;Messages&gt; call(String token) &#123;</span><br><span class="line">        <span class="comment">// 返回 Observable&lt;Messages&gt;，在订阅时请求消息列表，并在响应后发送请求到的消息列表</span></span><br><span class="line">        <span class="function"><span class="keyword">return</span> networkClient.<span class="title">messages</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.subscribe(<span class="keyword">new</span> Action1&lt;Messages&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Messages messages)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 处理显示消息列表</span></span><br><span class="line">        showMessages(messages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>传统的嵌套请求需要使用嵌套的 Callback 来实现。而通过 flatMap() ，可以把嵌套的请求写在一条链中，从而保持程序逻辑的清晰。</p>
<h3 id="4-3_其它操作符">4.3 其它操作符</h3><ul>
<li>filter<br>过滤</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query(<span class="string">"Hello, world!"</span>)</span><br><span class="line">.flatMap(urls<span class="function"> -&gt;</span> Observable.<span class="keyword">from</span>(urls))</span><br><span class="line">.flatMap(url<span class="function"> -&gt;</span> getTitle(url))</span><br><span class="line">.filter(title<span class="function"> -&gt;</span> title != <span class="literal">null</span>)</span><br><span class="line">.subscribe(title<span class="function"> -&gt;</span> System.out.println(title));</span><br></pre></td></tr></table></figure>
<ul>
<li>take()<br>输出最多指定数量的结果</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query(<span class="string">"Hello, world!"</span>)</span><br><span class="line"><span class="built_in">.</span>flatMap(urls <span class="subst">-&gt; </span>Observable<span class="built_in">.</span>from(urls))</span><br><span class="line"><span class="built_in">.</span>flatMap(url <span class="subst">-&gt; </span>getTitle(url))</span><br><span class="line"><span class="built_in">.</span>filter(title <span class="subst">-&gt; </span>title != <span class="built_in">null</span>)</span><br><span class="line"><span class="built_in">.</span><span class="keyword">take</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">.</span>subscribe(title <span class="subst">-&gt; </span>System<span class="built_in">.</span>out<span class="built_in">.</span>println(title));</span><br></pre></td></tr></table></figure>
<ul>
<li>doOnNext()<br>允许我们在每次输出一个元素之前做一些额外的事情，比如这里的保存标题。</li>
</ul>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query(<span class="string">"Hello, world!"</span>)</span><br><span class="line"><span class="built_in">.</span>flatMap(urls <span class="subst">-&gt; </span>Observable<span class="built_in">.</span>from(urls))</span><br><span class="line"><span class="built_in">.</span>flatMap(url <span class="subst">-&gt; </span>getTitle(url))</span><br><span class="line"><span class="built_in">.</span>filter(title <span class="subst">-&gt; </span>title != <span class="built_in">null</span>)</span><br><span class="line"><span class="built_in">.</span><span class="keyword">take</span>(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">.</span>doOnNext(title <span class="subst">-&gt; </span>saveTitle(title))</span><br><span class="line"><span class="built_in">.</span>subscribe(title <span class="subst">-&gt; </span>System<span class="built_in">.</span>out<span class="built_in">.</span>println(title));</span><br></pre></td></tr></table></figure>
<ul>
<li><p>merge<br>合并两个流</p>
</li>
<li><p>combineLatest<br>关联两个流</p>
</li>
</ul>
<p>更多API可以参考：Rx官方文档中文翻译</p>
<h2 id="5-_RxAndroid">5. RxAndroid</h2><p>RxAndroid是RxJava的一个针对Android平台的扩展。它包含了一些能够简化Android开发的工具。</p>
<p><strong>AndroidSchedulers</strong><br>提供了针对Android的线程系统的调度器。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.subscribeOn</span>(<span class="tag">Schedulers</span><span class="class">.io</span>())</span><br><span class="line"><span class="class">.observeOn</span>(<span class="tag">AndroidSchedulers</span><span class="class">.mainThread</span>())</span><br><span class="line"><span class="class">.subscribe</span>(<span class="tag">bitmap</span> <span class="tag">-</span>&gt; <span class="tag">myImageView</span><span class="class">.setImageBitmap</span>(<span class="tag">bitmap</span>));</span><br></pre></td></tr></table></figure>
<p><strong>AndroidObservable</strong><br>配合Android的生命周期<br>bindActivity()和bindFragment()方法默认使用AndroidSchedulers.mainThread()来执行观察者代码，这两个方法会在Activity或者Fragment结束的时候通知被观察者停止发出新的消息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AndroidObservable.bindActivity(<span class="keyword">this</span>, retrofitService.getImage(url))</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .subscribe(bitmap -&gt; myImageView.setImageBitmap(bitmap);</span><br><span class="line">AndroidObservable.fromBroadcast()</span><br></pre></td></tr></table></figure>
<p>允许你创建一个类似BroadcastReceiver的Observable对象。下面的例子展示了如何在网络变化的时候被通知到：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter <span class="built_in">filter</span> = <span class="keyword">new</span> IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line">AndroidObservable.fromBroadcast(context, <span class="built_in">filter</span>)</span><br><span class="line">.subscribe(intent -&gt; handleConnectivityChange(intent));</span><br></pre></td></tr></table></figure>
<p><strong>ViewObservable</strong><br>使用它可以给View添加了一些绑定。如果你想在每次点击view的时候都收到一个事件，可以使用ViewObservable.clicks()，或者你想监听TextView的内容变化，可以使用ViewObservable.text()。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">ViewObservable</span><span class="class">.clicks</span>(<span class="tag">mCardNameEditText</span>, <span class="tag">false</span>)</span><br><span class="line"><span class="class">.subscribe</span>(<span class="tag">view</span> <span class="tag">-</span>&gt; <span class="tag">handleClick</span>(<span class="tag">view</span>));</span><br></pre></td></tr></table></figure>
<h2 id="6-_RxBinding">6. RxBinding</h2><p>RxBinding 是 Jake Wharton 的一个开源库，它提供了一套在 Android 平台上的基于 RxJava 的 Binding API。所谓 Binding，就是类似设置 OnClickListener 、设置 TextWatcher 这样的注册绑定对象的 API。</p>
<p>举个设置点击监听的例子。使用 RxBinding ，可以把事件监听用这样的方法来设置：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Button button = ...;</span><br><span class="line">RxView.clickEvents(button) <span class="comment">// 以 Observable 形式来反馈点击事件</span></span><br><span class="line">.subscribe(<span class="keyword">new</span> Action1&lt;ViewClickEvent&gt;() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(ViewClickEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Click handling</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>通过 RxBinding 把点击监听转换成 Observable 之后，就有了对它进行扩展的可能。扩展的方式有很多，根据需求而定。一个例子是前面提到过的 throttleFirst() ，用于去抖动，也就是消除手抖导致的快速连环点击：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">RxView</span><span class="class">.clickEvents</span>(<span class="tag">button</span>)</span><br><span class="line"><span class="class">.throttleFirst</span>(500, <span class="tag">TimeUnit</span><span class="class">.MILLISECONDS</span>)</span><br><span class="line"><span class="class">.subscribe</span>(<span class="tag">clickAction</span>);</span><br></pre></td></tr></table></figure>
<p>如果想对 RxBinding 有更多了解，可以去它的 GitHub 项目 下面看看。</p>
<h2 id="7-_这些你应该了解">7. 这些你应该了解</h2><p><strong>扩展Rx</strong><br>前面举的 Retrofit 和 RxBinding 的例子，是两个可以提供现成的 Observable 的库。而如果你有某些异步操作无法用这些库来自动生成 Observable，也完全可以自己写。例如数据库的读写、大图片的载入、文件压缩/解压等各种需要放在后台工作的耗时操作，都可以用 RxJava 来实现，有了之前几章的例子，这里应该不用再举例了。</p>
<p><strong>内存泄漏</strong><br>Observable持有Context导致的内存泄露<br>这个问题是因为创建subscription的时候，以某种方式持有了context的引用，尤其是当你和view交互的时候，这太容易发生！如果Observable没有及时结束，内存占用就会越来越大。</p>
<p><strong>使用缓存，减少Observable的创建</strong><br>RxJava内置有缓存机制，这样你就可以对同一个Observable对象执行unsubscribe/resubscribe，却不用重复运行得到Observable的代码。cache() (或者 replay())会继续执行网络请求（甚至你调用了unsubscribe也不会停止）。这就是说你可以在Activity重新创建的时候从cache()的返回值中创建一个新的Observable对象。</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;Photo&gt; request = service.getUserPhoto(id).cache();</span><br><span class="line">Subscription <span class="sub"><span class="keyword">sub</span> = request.subscribe(photo -&gt; handleUserPhoto(photo));</span></span><br><span class="line"></span><br><span class="line">// ...When the Activity is being recreated...</span><br><span class="line"><span class="sub"><span class="keyword">sub</span>.unsubscribe();</span></span><br><span class="line"></span><br><span class="line">// ...Once the Activity is recreated...</span><br><span class="line">request.subscribe(photo -&gt; handleUserPhoto(photo));</span><br></pre></td></tr></table></figure>
<p>注意，两次sub是使用的同一个缓存的请求。在哪里去存储请求的结果还是要你自己来做，和所有其他的生命周期相关的解决方案一样，必须在生命周期外的某个地方存储。（retained fragment或者单例等等）。</p>
<p><strong>及时取消订阅</strong><br>在生命周期的某个时刻及时取消订阅，释放对context的引用。一个常见的情景就是使用CompositeSubscription来持有所有的Subscriptions，然后在onDestroy()或者onDestroyView()里取消所有的订阅。</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> CompositeSubscription mCompositeSubscription = <span class="keyword">new</span> CompositeSubscription();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mCompositeSubscription.add(</span><br><span class="line">    AndroidObservable.bindActivity(<span class="keyword">this</span>, Observable.just(<span class="string">"Hello, World!"</span>))</span><br><span class="line">    .subscribe(s -&gt; System.out.println(s)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">    mCompositeSubscription.unsubscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以在Activity/Fragment的基类里创建一个CompositeSubscription对象，在子类中使用它。</p>
<p>注意! 一旦你调用了 CompositeSubscription.unsubscribe()，这个CompositeSubscription对象就不可用了, 如果你还想使用CompositeSubscription，就必须在创建一个新的对象了。</p>
<h4 id="资料">资料</h4><ul>
<li><a href="http://reactivex.io/" target="_blank" rel="external">Rx官方网站</a></li>
<li><a href="http://reactivex.io/tutorials.html" target="_blank" rel="external">tutorials</a></li>
<li><a href="https://github.com/ReactiveX/RxJava/wiki" target="_blank" rel="external">RxJava Wiki</a></li>
<li><a href="https://github.com/ReactiveX/RxJava/wiki/How-To-Use-RxJava" target="_blank" rel="external">How-To-Use-RxJava</a></li>
<li><p><a href="https://twitter.com/ReactiveX" target="_blank" rel="external">Twitter</a></p>
</li>
<li><p><a href="https://github.com/lzyzsd/Awesome-RxJava" target="_blank" rel="external">Awesome－RxJava</a></p>
</li>
<li><a href="http://rxjava.yuxingxin.com/index.html" target="_blank" rel="external">RxJava Essentials 中文翻译版</a></li>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a></li>
<li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html" target="_blank" rel="external">Rx官方文档中文翻译</a></li>
<li><p><a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="external">RxJava-Android-Samples</a></p>
</li>
<li><p><a href="http://techblog.netflix.com/2013/02/rxjava-netflix-api.html" target="_blank" rel="external">Reactive Programming in the Netflix API with RxJava</a></p>
</li>
<li><a href="http://akarnokd.blogspot.hu/" target="_blank" rel="external">Advanced RxJava</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_Rx概念介绍">1. Rx概念介绍</h2><p>Reactive是一种编程思想，Reactive编程就是异步数据流的编程，基于事件的编程</p>
<p><strong>一切皆流</strong></p>
<p>一个流是将要发生的有序序列事件的一部分。<br>你可以创建任何事物的数据流。任何事物都可以是流：变量，用户输入，属性 ，缓存，数据结构等等<br>]]>
    
    </summary>
    
      <category term="RxAndroid" scheme="http://science09.github.io/tags/RxAndroid/"/>
    
      <category term="RxJava" scheme="http://science09.github.io/tags/RxJava/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MacOS安装Docker工具箱指南]]></title>
    <link href="http://science09.github.io/2016/03/27/MacOS%E5%AE%89%E8%A3%85Docker%E5%B7%A5%E5%85%B7%E7%AE%B1%E6%8C%87%E5%8D%97/"/>
    <id>http://science09.github.io/2016/03/27/MacOS安装Docker工具箱指南/</id>
    <published>2016-03-27T09:05:38.000Z</published>
    <updated>2016-03-27T09:34:55.424Z</updated>
    <content type="html"><![CDATA[<p>之前在MacOS上使用Docker是通过安装Boot2Docker，近期，Docker团队推出了Mac版和Windows版的Docker工具箱，该工具箱包含了以下内容：</p>
<a id="more"></a>
<ul>
<li>Docker命令行客户端，通过运行Docker引擎来创建映像和容器；</li>
<li>Docker Machine，使得可以从MacOS的终端来运行Docker引擎的命令</li>
<li>Docker Compose，用来运行docker-compose命令；</li>
<li>Kitematic, the Docker GUI</li>
<li>一个预先配置好的Docker命令行环境的快速启动Shell；</li>
<li>Oracle 的VirtualBox虚拟机；</li>
</ul>
<p>由于Docker 引擎的守护进程使用了一些Linux特有的内核特性，所以你并不能直接在本地OSX环境下直接运行Docker引擎。必须借助虚拟机，通过在本地创建一个Linxu虚拟机，通过Docker-machine的命令来连接Linux虚拟机。Linux虚拟机上运行Docker引擎来为你本地的Mac环境提供Docker服务。</p>
<h3 id="1-检查环境">1.检查环境</h3><p>先确定下你的Mac环境，你的环境必须是OS X 10.8 “Mountain Lion”或者更高的版本方可运行Docker软件。</p>
<ol>
<li>你可以通过左上角的Mac图标-&gt; 关于本机 ，查看到当前的OS X版本信息：</li>
</ol>
<p><img src="http://7ktvvq.com1.z0.glb.clouddn.com/OSX_Version.png" alt="OS X版本信息"></p>
<ol>
<li>如果你的OS X版本符合要求，那么可以继续往下。如果你的版本过低，可以考虑先升级的操作系统版本； </li>
</ol>
<h3 id="2-安装Docker工具箱">2.安装Docker工具箱</h3><ol>
<li><p>Docker工具箱下载<br>Docker工具箱的下载可以从Docker的<a href="https://www.docker.com/products/docker-toolbox#/overview" target="_blank" rel="external">官方网站</a>下载，从官网上下载Docker需要翻墙，请自备<a href="http://gjsq.me/15431612" target="_blank" rel="external">梯子</a>。为了国内朋友下载方便，我把Docker工具箱上传到百度云，请<a href="https://pan.baidu.com/s/1o89urzG" target="_blank" rel="external">点击这里下载</a>。</p>
</li>
<li><p>安装过程比较简单，只要跟着提示一步一步往下走就可以了。通过双击刚下载下来的<code>DockerToolbox-1.10.3.pkg</code>软件包来进行安装。双击之后就会弹出对话框，<br><img src="http://7ktvvq.com1.z0.glb.clouddn.com/Docker_install_1.png" alt="Docker安装启动"></p>
</li>
</ol>
<p>点击继续，<br><img src="http://7ktvvq.com1.z0.glb.clouddn.com/Docker_install_2.png" alt="Docker工具箱概览"><br>Docker工具箱所包含: Dokcer客户端，DockerMachine，DockerCompose，Kitmatic，快速启动终端，以及该软件将被安装到<code>/usr/local/bin</code>目录下，点击继续进行下一步，</p>
<p><img src="http://7ktvvq.com1.z0.glb.clouddn.com/Docker_install_3.png" alt="安装类型"><br>这一步显示将占用的磁盘空间，可以点击<code>更改安装位置</code>进行自定义安装，如果默认点击安装即可。</p>
<p><img src="http://7ktvvq.com1.z0.glb.clouddn.com/Docker_install_4.png" alt="输入密码提示"><br>点击安装之后就会提示输入密码，输入本机的密码后，点击 安装软件，</p>
<p><img src="http://7ktvvq.com1.z0.glb.clouddn.com/Docker_install_5.png" alt="安装Docker工具箱"><br>点击安装软件后，开始进行安装，经过几分钟，安装结束后即弹出如下的QuickStart对话框；</p>
<p><img src="http://7ktvvq.com1.z0.glb.clouddn.com/Docker_install_6.png" alt="快速启动工具选择"><br>你可以选择两个中的其中一个，也可以不选择，直接点击 继续；</p>
<p><img src="http://7ktvvq.com1.z0.glb.clouddn.com/Docker_install_7.png" alt="安装完成"><br>安装成功，点击关闭即完成安装。</p>
<h3 id="3-验证安装是否正确">3.验证安装是否正确</h3><p> 1.点击 <code>LaunchPad</code>，定位到Docker Quickstart Terminal的图标，<br><img src="http://7ktvvq.com1.z0.glb.clouddn.com/applications_folder.png" alt="此处输入图片的描述"></p>
<p> 2.点击图标启动Docker 快速启动终端窗口。终端启动之后，会进行一系列的操作,包括创建虚拟机，启动Docker守护进程，进行一些初始化配置；<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">bash <span class="comment">--login '/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh'</span></span><br><span class="line">Last login: Thu Mar 17 20:34:33 on ttys003</span><br><span class="line">appledeiMac:~ apple$ bash <span class="comment">--login '/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh'</span></span><br><span class="line">Creating CA: /Users/apple/.docker/machine/certs/ca.pem</span><br><span class="line">Creating client certificate: /Users/apple/.docker/machine/certs/cert.pem</span><br><span class="line">Running pre-<span class="operator"><span class="keyword">create</span> checks...</span><br><span class="line">Creating machine...</span><br><span class="line">(<span class="keyword">default</span>) Copying /<span class="keyword">Users</span>/apple/.docker/machine/<span class="keyword">cache</span>/boot2docker.iso <span class="keyword">to</span> /<span class="keyword">Users</span>/apple/.docker/machine/machines/<span class="keyword">default</span>/boot2docker.iso...</span><br><span class="line">(<span class="keyword">default</span>) Creating VirtualBox VM...</span><br><span class="line">(<span class="keyword">default</span>) Creating SSH <span class="keyword">key</span>...</span><br><span class="line">(<span class="keyword">default</span>) <span class="keyword">Starting</span> the VM...</span><br><span class="line">(<span class="keyword">default</span>) <span class="keyword">Check</span> network <span class="keyword">to</span> re-<span class="keyword">create</span> <span class="keyword">if</span> needed...</span><br><span class="line">(<span class="keyword">default</span>) <span class="keyword">Found</span> a <span class="keyword">new</span> host-<span class="keyword">only</span> adapter: <span class="string">"vboxnet0"</span></span><br><span class="line">(<span class="keyword">default</span>) Waiting <span class="keyword">for</span> an IP...</span><br><span class="line">Waiting <span class="keyword">for</span> machine <span class="keyword">to</span> be running, this may take a few minutes...</span><br><span class="line">Detecting operating <span class="keyword">system</span> <span class="keyword">of</span> created <span class="keyword">instance</span>...</span><br><span class="line">Waiting <span class="keyword">for</span> SSH <span class="keyword">to</span> be available...</span><br><span class="line">Detecting the provisioner...</span><br><span class="line">Provisioning <span class="keyword">with</span> boot2docker...</span><br><span class="line">Copying certs <span class="keyword">to</span> the <span class="keyword">local</span> machine <span class="keyword">directory</span>...</span><br><span class="line">Copying certs <span class="keyword">to</span> the remote machine...</span><br><span class="line">Setting Docker configuration <span class="keyword">on</span> the remote daemon...</span><br><span class="line">Checking <span class="keyword">connection</span> <span class="keyword">to</span> Docker...</span><br><span class="line">Docker <span class="keyword">is</span> up <span class="keyword">and</span> running!</span><br><span class="line"><span class="keyword">To</span> see how <span class="keyword">to</span> <span class="keyword">connect</span> your Docker <span class="keyword">Client</span> <span class="keyword">to</span> the Docker <span class="keyword">Engine</span> running <span class="keyword">on</span> this <span class="keyword">virtual</span> machine, run: /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/docker-machine env <span class="keyword">default</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        ##         .</span><br><span class="line">                  ## ## ##        ==</span><br><span class="line">               ## ## ## ## ##    ===</span><br><span class="line">           /<span class="string">"""""""""""""""""\___/ ===</span><br><span class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</span><br><span class="line">           \______ o           __/</span><br><span class="line">             \    \         __/</span><br><span class="line">              \____\_______/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker is configured to use the default machine with IP 192.168.99.100</span><br><span class="line">For help getting started, check out the docs at https://docs.docker.com</span></span></span><br></pre></td></tr></table></figure></p>
<p>3.鼠标点击到Docker的快速启动窗口，在命令行中敲入<code>docker version</code>即可看到当前的Docker版本信息；<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">appledeiMac:~ apple$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      <span class="number">1.10</span><span class="number">.3</span></span><br><span class="line"> API version:  <span class="number">1.22</span></span><br><span class="line"> Go version:   go1<span class="number">.5</span><span class="number">.3</span></span><br><span class="line"> Git commit:   <span class="number">20f</span>81dd</span><br><span class="line"> Built:        Thu Mar <span class="number">10</span> <span class="number">21</span>:<span class="number">49</span>:<span class="number">11</span> <span class="number">2016</span></span><br><span class="line"> OS/Arch:      darwin/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      <span class="number">1.10</span><span class="number">.3</span></span><br><span class="line"> API version:  <span class="number">1.22</span></span><br><span class="line"> Go version:   go1<span class="number">.5</span><span class="number">.3</span></span><br><span class="line"> Git commit:   <span class="number">20f</span>81dd</span><br><span class="line"> Built:        Thu Mar <span class="number">10</span> <span class="number">21</span>:<span class="number">49</span>:<span class="number">11</span> <span class="number">2016</span></span><br><span class="line"> OS/Arch:      linux/amd64</span><br></pre></td></tr></table></figure></p>
<p>4.接着来运行官方的helloworld程序，在命令行中输入 <code>docker run hello-world</code>, 如果碰到网络问题，有可能会出现以下的情况：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appledeiMac:~ apple$ docker run hello-world</span><br><span class="line">Unable <span class="built_in">to</span> find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">docker: Error response <span class="built_in">from</span> daemon: Get <span class="keyword">https</span>://registry-<span class="number">1.</span>docker.io/v2/library/hello-world/manifests/latest: Get <span class="keyword">https</span>://auth.docker.io/<span class="keyword">token</span>?scope=repository%<span class="number">3</span>Alibrary%<span class="number">2</span>Fhello-world%<span class="number">3</span>Apull&amp;service=registry.docker.io: net/<span class="keyword">http</span>: request canceled <span class="keyword">while</span> waiting <span class="keyword">for</span> connection (Client.Timeout exceeded <span class="keyword">while</span> awaiting headers).</span><br></pre></td></tr></table></figure></p>
<p>碰到上述的问题，有可能是网络不稳定导致的，多试几次，在我的网络环境下，试了三次才成功的从DockerHub上拉取到hello-world的image。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">appledeiMac:~ apple$ docker run hello-world</span><br><span class="line">Unable <span class="built_in">to</span> find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling <span class="built_in">from</span> library/hello-world</span><br><span class="line"><span class="number">03</span>f4658f8b78: Pull complete </span><br><span class="line">a3ed95caeb02: Pull complete </span><br><span class="line">Digest: sha256:<span class="number">8</span>be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello <span class="built_in">from</span> Docker.</span><br><span class="line">This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took <span class="operator">the</span> following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted <span class="operator">the</span> Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled <span class="operator">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="operator">the</span> Docker Hub.</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created <span class="operator">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="operator">the</span></span><br><span class="line">    executable that produces <span class="operator">the</span> output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="operator">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">    <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run <span class="operator">an</span> Ubuntu container <span class="operator">with</span>:</span><br><span class="line"> $ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="operator">and</span> more <span class="operator">with</span> <span class="operator">a</span> free Docker Hub account:</span><br><span class="line"> <span class="keyword">https</span>://hub.docker.com</span><br><span class="line"></span><br><span class="line">For more examples <span class="operator">and</span> ideas, visit:</span><br><span class="line"> <span class="keyword">https</span>://docs.docker.com/userguide/</span><br></pre></td></tr></table></figure>
<p>到这一步，Docker的安装就算成功了，可以开启Docker的愉快之旅了，更多好玩的功能等你来探索！</p>
<p>原文链接：<a href="http://science09.github.io/2016/03/27/MacOS安装Docker工具箱指南/">http://science09.github.io/2016/03/27/MacOS安装Docker工具箱指南/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前在MacOS上使用Docker是通过安装Boot2Docker，近期，Docker团队推出了Mac版和Windows版的Docker工具箱，该工具箱包含了以下内容：</p>]]>
    
    </summary>
    
      <category term="Docker" scheme="http://science09.github.io/tags/Docker/"/>
    
      <category term="Mac" scheme="http://science09.github.io/tags/Mac/"/>
    
      <category term="Docker" scheme="http://science09.github.io/categories/Docker/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[gevent折腾记]]></title>
    <link href="http://science09.github.io/2015/09/26/gevent%E6%8A%98%E8%85%BE%E8%AE%B0/"/>
    <id>http://science09.github.io/2015/09/26/gevent折腾记/</id>
    <published>2015-09-26T06:49:38.000Z</published>
    <updated>2015-09-26T07:30:46.206Z</updated>
    <content type="html"><![CDATA[<p>搜了一下gevent在windows上的安装，没法直接通过 <code>pip install gevent</code> 或 <code>easy_install</code> 的方式来安装，必须经过源代码的方式来安装。<br><a id="more"></a></p>
<h3 id="1-_下载源码包">1. 下载源码包</h3><p>   可通过 <code>wget  http://pypi.python.org/packages/source/g/gevent/gevent-0.13.8.tar.gz</code>方式下载，也可以直接在浏览器地址栏输入 <code>http://pypi.python.org/packages/source/g/gevent/gevent-0.13.8.tar.gz</code> 即可。</p>
<h3 id="2-_解压">2. 解压</h3><p>  如果有tar命令(安装了cygwin环境)，可以用 <code>tar zxvf gevent-0.13.8.tar.gz</code> 进行解压缩; 也可以直接用windows的解压缩工具解压。</p>
<h3 id="3-_打开命令行">3. 打开命令行</h3><p>  打开cmd窗口，目录切换到 gevent的目录下；</p>
<h3 id="4-_下载libevent">4. 下载libevent</h3><p>  在安装gevent之前，还需要先去下载 libevent，在命令窗口下，可以看到当前目录下有个 fetch_libevent.py的文件，可以直接执行 <code>python fetch_libevent.py</code>， 结果没有想象的那么顺利，抓取了一会儿后报错了。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">$ python fetch_libevent.py</span><br><span class="line">downloading libevent source from http://github.com/downloads/libevent/libevent/l</span><br><span class="line">ibevent-<span class="number">1</span>.<span class="number">4</span>.<span class="number">14</span>b-stable.tar.gz</span><br><span class="line">Traceback (most recent <span class="flow">call</span> last):</span><br><span class="line">  File "fetch_libevent.py", line <span class="number">67</span>, <span class="flow">in</span> &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File "fetch_libevent.py", line <span class="number">63</span>, <span class="flow">in</span> main</span><br><span class="line">    download_and_extract(url, hash)</span><br><span class="line">  File "fetch_libevent.py", line <span class="number">45</span>, <span class="flow">in</span> download_and_extract</span><br><span class="line">    tgz = urllib.urlopen(url).read()</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">87</span>, <span class="flow">in</span> urlopen</span><br><span class="line">    return opener.open(url)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">208</span>, <span class="flow">in</span> open</span><br><span class="line">    return getattr(self, name)(url)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">359</span>, <span class="flow">in</span> open_http</span><br><span class="line">    return self.http_error(url, fp, errcode, errmsg, headers)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">372</span>, <span class="flow">in</span> http_error</span><br><span class="line">    result = method(url, fp, errcode, errmsg, headers)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">635</span>, <span class="flow">in</span> http_error_302</span><br><span class="line">    data)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">661</span>, <span class="flow">in</span> redirect_internal</span><br><span class="line">    return self.open(newurl)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">208</span>, <span class="flow">in</span> open</span><br><span class="line">    return getattr(self, name)(url)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">359</span>, <span class="flow">in</span> open_http</span><br><span class="line">    return self.http_error(url, fp, errcode, errmsg, headers)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">372</span>, <span class="flow">in</span> http_error</span><br><span class="line">    result = method(url, fp, errcode, errmsg, headers)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">665</span>, <span class="flow">in</span> http_error_301</span><br><span class="line">    return self.http_error_302(url, fp, errcode, errmsg, headers, data)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">635</span>, <span class="flow">in</span> http_error_302</span><br><span class="line">    data)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">661</span>, <span class="flow">in</span> redirect_internal</span><br><span class="line">    return self.open(newurl)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">208</span>, <span class="flow">in</span> open</span><br><span class="line">    return getattr(self, name)(url)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">451</span>, <span class="flow">in</span> open_https</span><br><span class="line">    return self.http_error(url, fp, errcode, errmsg, headers)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">372</span>, <span class="flow">in</span> http_error</span><br><span class="line">    result = method(url, fp, errcode, errmsg, headers)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">635</span>, <span class="flow">in</span> http_error_302</span><br><span class="line">    data)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">661</span>, <span class="flow">in</span> redirect_internal</span><br><span class="line">    return self.open(newurl)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">208</span>, <span class="flow">in</span> open</span><br><span class="line">    return getattr(self, name)(url)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\urllib.py", line <span class="number">437</span>, <span class="flow">in</span> open_https</span><br><span class="line">    h.endheaders(data)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\httplib.py", line <span class="number">969</span>, <span class="flow">in</span> endheaders</span><br><span class="line">    self._send_output(message_body)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\httplib.py", line <span class="number">829</span>, <span class="flow">in</span> _send_output</span><br><span class="line">    self.send(msg)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\httplib.py", line <span class="number">791</span>, <span class="flow">in</span> send</span><br><span class="line">    self.connect()</span><br><span class="line">  File "c:\ProgramData\Python27\lib\httplib.py", line <span class="number">1176</span>, <span class="flow">in</span> connect</span><br><span class="line">    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\ssl.py", line <span class="number">387</span>, <span class="flow">in</span> wrap_socket</span><br><span class="line">    ciphers=ciphers)</span><br><span class="line">  File "c:\ProgramData\Python27\lib\ssl.py", line <span class="number">143</span>, <span class="flow">in</span> __init__</span><br><span class="line">    self.do_handshake()</span><br><span class="line">  File "c:\ProgramData\Python27\lib\ssl.py", line <span class="number">305</span>, <span class="flow">in</span> do_handshake</span><br><span class="line">    self._sslobj.do_handshake()</span><br><span class="line"><span class="function">IOError: [<span class="title">Errno</span> <span class="title">socket</span> <span class="title">error</span>] [<span class="title">Errno</span> 1] <span class="title">_ssl.c</span>:504: <span class="title">error</span>:14077410:<span class="title">SSL</span> <span class="title">routines</span>:</span><br><span class="line"><span class="title">SSL23_GET_SERVER_HELLO:sslv3</span> <span class="title">alert</span> <span class="title">handshake</span> <span class="title">failure</span></span></span><br></pre></td></tr></table></figure></p>
<p>从错误的打印来看，是SSL3握手失败，没找到解决方案。看了看<code>fetch_libevent.py</code>的源代码，发现是从 <code>http://github.com/downloads/libevent/libevent/l
ibevent-1.4.14b-stable.tar.gz</code> 这个路径下载的libvent，直接复制了链接放到浏览器里下载。刚开始在浏览器了下了几次，都没有下载成功，后来打开迅雷，直接拷贝链接地址到迅雷下载，没几秒钟就下载下来了。</p>
<h3 id="5-_编译安装">5.  编译安装</h3><p>在命令行窗口中执行： <code>python setup.py build</code> , 运行一段时间又报错了。</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py build</span><br><span class="line">using libevent sources <span class="flow">in</span> libevent-src</span><br><span class="line">running build</span><br><span class="line">running build_py</span><br><span class="line">creating build</span><br><span class="line">creating build\lib.win32-<span class="number">2</span>.<span class="number">7</span></span><br><span class="line">creating build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\backdoor.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\baseserver.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\coros.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\dns.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\event.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\greenlet.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\http.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\httplib.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\hub.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\local.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\monkey.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\pool.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\pywsgi.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\queue.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\rawgreenlet.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\select.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\server.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\socket.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\ssl.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\sslold.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\thread.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\timeout.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\util.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\win32util.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\wsgi.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">copying gevent\__init__.py -&gt; build\lib.win32-<span class="number">2</span>.<span class="number">7</span>\gevent</span><br><span class="line">running build_ext</span><br><span class="line">building 'gevent.core' extension</span><br><span class="line">creating build\temp.win32-<span class="number">2</span>.<span class="number">7</span></span><br><span class="line">creating build\temp.win32-<span class="number">2</span>.<span class="number">7</span>\Release</span><br><span class="line">creating build\temp.win32-<span class="number">2</span>.<span class="number">7</span>\Release\gevent</span><br><span class="line">creating build\temp.win32-<span class="number">2</span>.<span class="number">7</span>\Release\libevent-src</span><br><span class="line">creating build\temp.win32-<span class="number">2</span>.<span class="number">7</span>\Release\libevent-src\WIN32-Code</span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tcgevent</span>/<span class="title">core.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">gevent</span>/<span class="title">core.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">core.c</span></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tclibevent</span>-<span class="title">src</span>\<span class="title">buffer.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">libevent</span>-<span class="title">src</span>\<span class="title">buffer.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">buffer.c</span></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tclibevent</span>-<span class="title">src</span>\<span class="title">evbuffer.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evbuffer.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">evbuffer.c</span></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tclibevent</span>-<span class="title">src</span>\<span class="title">evdns.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evdns.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">evdns.c</span></span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evdns.c</span>(1062) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">_ftime64</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">_ftime64_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">sys</span>/<span class="title">timeb.h</span>(143) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">_ftime64</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evdns.c</span>(1180) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">strerror</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">strerror_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">string.h</span>(126) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">strerror</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evdns.c</span>(1210) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">strerror</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">strerror_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">string.h</span>(126) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">strerror</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evdns.c</span>(1229) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">strerror</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">strerror_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">string.h</span>(126) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">strerror</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evdns.c</span>(1927) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">strerror</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">strerror_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">string.h</span>(126) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">strerror</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evdns.c</span>(2623) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">strtok</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span></span><br><span class="line"><span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">strtok_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use</span> <span class="title">_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">string.h</span>(166) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">strtok</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evdns.c</span>(2753) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">_open</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">_sopen_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use</span> <span class="title">_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">io.h</span>(239) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">_open</span>'</span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tclibevent</span>-<span class="title">src</span>\<span class="title">event.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">libevent</span>-<span class="title">src</span>\<span class="title">event.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">event.c</span></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tclibevent</span>-<span class="title">src</span>\<span class="title">event_tagging.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">libevent</span>-<span class="title">src</span>\<span class="title">event_tagging.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">event_tagging.c</span></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tclibevent</span>-<span class="title">src</span>\<span class="title">evrpc.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evrpc.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">evrpc.c</span></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tclibevent</span>-<span class="title">src</span>\<span class="title">evutil.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evutil.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">evutil.c</span></span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evutil.c</span>(223) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">_ftime64</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">_ftime64_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">sys</span>/<span class="title">timeb.h</span>(143) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">_ftime64</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evutil.c</span>(245) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">_vsnprintf</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">_vsnprintf_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>,<span class="title">use</span> <span class="title">_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">stdio.h</span>(358) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">_vsnprintf</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">evutil.c</span>(283) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">getenv</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span></span><br><span class="line"><span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">_dupenv_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use</span> <span class="title">_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Include</span>\<span class="title">stdlib.h</span>(447) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">getenv</span>'</span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span> /<span class="title">c</span> /<span class="title">nologo</span> /<span class="title">Ox</span> /<span class="title">MD</span> /<span class="title">W3</span> /<span class="title">GS</span>- /<span class="title">DNDEBUG</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">include</span> -<span class="title">Ilibevent</span>-<span class="title">src</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">WIN32</span>-<span class="title">Code</span> -<span class="title">Ilibevent</span>-<span class="title">src</span>\<span class="title">compat</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">include</span> -<span class="title">Ic</span>:\<span class="title">ProgramData</span>\<span class="title">Python27</span>\<span class="title">PC</span> /<span class="title">Tclibevent</span>-<span class="title">src</span>\<span class="title">http.c</span> /<span class="title">Fobuild</span>\<span class="title">temp.win32</span>-2.7\<span class="title">Release</span>\<span class="title">libevent</span>-<span class="title">src</span>\<span class="title">http.obj</span> -<span class="title">DHAVE_CONFIG_H</span> -<span class="title">DWIN32</span></span><br><span class="line"><span class="title">http.c</span></span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">http.c</span>(102) : <span class="title">warning</span> <span class="title">C4005</span>: '<span class="title">NI_NUMERICHOST</span>' : <span class="title">macro</span> <span class="title">redefinition</span></span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">WinSDK</span>\<span class="title">Include</span>\<span class="title">ws2def.h</span>(953) : <span class="title">see</span> <span class="title">previous</span> <span class="title">definition</span> <span class="title">of</span> '<span class="title">NI_NUMERICHOST</span>'</span><br><span class="line"></span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">http.c</span>(103) : <span class="title">warning</span> <span class="title">C4005</span>: '<span class="title">NI_NUMERICSERV</span>' : <span class="title">macro</span> <span class="title">redefinition</span></span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">WinSDK</span>\<span class="title">Include</span>\<span class="title">ws2def.h</span>(955) : <span class="title">see</span> <span class="title">previous</span> <span class="title">definition</span> <span class="title">of</span> '<span class="title">NI_NUMERICSERV</span>'</span><br><span class="line"></span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">http.c</span>(145) : <span class="title">error</span> <span class="title">C2011</span>: '<span class="title">addrinfo</span>' : '<span class="title">struct</span>' <span class="title">type</span> <span class="title">redefinition</span></span><br><span class="line">        <span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">WinSDK</span>\<span class="title">Include</span>\<span class="title">ws2def.h</span>(841) : <span class="title">see</span> <span class="title">declaration</span> <span class="title">of</span> '<span class="title">addrinfo</span>'</span><br><span class="line"><span class="title">libevent</span>-<span class="title">src</span>\<span class="title">http.c</span>(291) : <span class="title">warning</span> <span class="title">C4996</span>: '<span class="title">strcpy</span>': <span class="title">This</span> <span class="title">function</span> <span class="title">or</span> <span class="title">variable</span> <span class="title">may</span> <span class="title">be</span> <span class="title">unsafe</span>. <span class="title">Consider</span> <span class="title">using</span> <span class="title">strcpy_s</span> <span class="title">instead</span>. <span class="title">To</span> <span class="title">disable</span> <span class="title">deprecation</span>, <span class="title">use</span> <span class="title">_CRT_SECURE_NO_WARNINGS</span>. <span class="title">See</span> <span class="title">online</span> <span class="title">help</span> <span class="title">for</span> <span class="title">details</span>.</span><br><span class="line"><span class="title">error</span>: <span class="title">command</span> '"<span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>\<span class="title">AppData</span>\<span class="title">Local</span>\<span class="title">Programs</span>\<span class="title">Common</span>\<span class="title">Microsoft</span>\<span class="title">Visual</span> <span class="title">C</span>++ <span class="title">for</span> <span class="title">Python</span>\9.0\<span class="title">VC</span>\<span class="title">Bin</span>\<span class="title">cl.exe</span>"' <span class="title">failed</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">status</span> 2</span></span><br></pre></td></tr></table></figure>
<p>又编译不过，真是麻烦，查找一下error，我们发现这么一行： <code>libevent-src\http.c(145) : error C2011: &#39;addrinfo&#39; : &#39;struct&#39; type redefinition</code> ，从这个报错情况来看，应该是重复定义了，打开http.c 文件，定位到145行，先把这个结构体注释掉，再重新编译试试看，见证奇迹的时刻，编译通过了。<br>最后在执行 <code>python setup.py install</code> 进行安装。</p>
<h3 id="总结">总结</h3><p>经过一步一步的折腾，gevent在windows上的安装总算成功了，中间遇到一些问题，在面对问题时，我们不要急于放弃，可以根据错误提示再看源码一步一步的定位到问题的原因，从而解决问题。</p>
<p>参考文章：<br><a href="http://lutaf.com/57.htm" target="_blank" rel="external">windows下安装gevent</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>搜了一下gevent在windows上的安装，没法直接通过 <code>pip install gevent</code> 或 <code>easy_install</code> 的方式来安装，必须经过源代码的方式来安装。<br>]]>
    
    </summary>
    
      <category term="gevent" scheme="http://science09.github.io/tags/gevent/"/>
    
      <category term="python" scheme="http://science09.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python迭代器,生成器以及装饰器]]></title>
    <link href="http://science09.github.io/2015/09/21/python%E8%BF%AD%E4%BB%A3%E5%99%A8-%E7%94%9F%E6%88%90%E5%99%A8%E4%BB%A5%E5%8F%8A%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://science09.github.io/2015/09/21/python迭代器-生成器以及装饰器/</id>
    <published>2015-09-21T14:55:41.000Z</published>
    <updated>2015-09-21T14:59:47.763Z</updated>
    <content type="html"><![CDATA[<h3 id="迭代器">迭代器</h3><p>在Python中，对于string、list、dict、tuple等这类容器对象，使用for循环遍历是很方便的。在后台for语句对容器对象调用iter()函数，iter()是python的内置函数。iter()会返回一个定义了next()方法的迭代器对象，它在容器中逐个访问容器内元素，next()也是python的内置函数。在没有后续元素时，next()会抛出一个StopIteration异常，通知for语句循环结束。<br><a id="more"></a><br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>it = iter(s)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>it</span><br><span class="line">&lt;iterator object at <span class="number">0x01B450B0</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>it.next()</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>it.next()</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>it.next()</span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>it.next()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>
<p>那么，我们如何来实现一个迭代器呢？要在一个类中实现迭代器，只需实现一个<code>__iter__(self)</code>方法，使其返回一个带有<code>__next__(self)</code>方法的对象就可以了。如果你在一个类中刚好也定义了<code>__next__(self)</code>方法（一般使用迭代器都会定义），那在<code>__iter__</code>里只要返回<code>self</code>就可以。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, max)</span>:</span></span><br><span class="line">        super(Fib, self).__init__()</span><br><span class="line">        self.max = max</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        fib = self.a</span><br><span class="line">        <span class="keyword">if</span> fib &gt; self.max:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">return</span> fib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    fib = Fib(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fib:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>上述代码中，定义了一个Fib类，用于生成fibonacci序列。用for遍历时会逐个打印生成的fibonacci数，max是生成的fibonacci序列中数字大小的上限。</p>
<p>在类的实现中，定义了一个<code>__iter__(self)</code>方法，这个方法是在遍历时被<code>iter()</code>调用，返回一个迭代器。因为在遍历的时候，是直接调用的python内置函数<code>iter()</code>，由<code>iter()</code>通过调用<code>__iter__(self)</code>获得对象的迭代器。有了迭代器，就可以逐个遍历元素了。而逐个遍历的时候，也是使用内置的<code>next()</code>函数通过调用对象的<code>__next__(self)</code>方法对迭代器对象进行遍历。所以要实现<code>__iter__(self)</code>和<code>__next__(self)</code>。而且因为实现了<code>__next__(self)</code>，所以在实现<code>__iter__(self)</code>的时候，直接返回<code>self</code>就可以。</p>
<p>为了更好理解，我再简单重复下上面说的那一段：在循环遍历自定义容器对象时,会使用python内置函数<code>iter()</code>调用遍历对象的<code>__iter__(self)</code>获得一个迭代器,之后再循环对这个迭代器使用<code>next()</code>调用迭代器对象的<code>__next__(self)</code>。<code>__iter__</code>只会被调用一次,而<code>__next__</code>会被调用 n 次。</p>
<h3 id="生成器">生成器</h3><p>生成器（Generator）是创建迭代器的简单而强大的工具。它们写起来就像是正规的函数，只是在需要返回数据的时候使用yield语句。每次next()被调用时，生成器会返回它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）。以下示例演示了生成器可以很简单的创建出来:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(data)</span>:</span></span><br><span class="line"><span class="prompt">... </span>    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"><span class="prompt">... </span>        <span class="keyword">yield</span> data[index]</span><br><span class="line"><span class="prompt">... </span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">for</span> char <span class="keyword">in</span> reverse(<span class="string">'hello'</span>):</span><br><span class="line"><span class="prompt">... </span>    print(char)</span><br><span class="line"><span class="prompt">... </span></span><br><span class="line">o</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">e</span><br><span class="line">h</span><br></pre></td></tr></table></figure></p>
<p>关于迭代器和生成器的区别，生成器能做到迭代器能做的所有事,而且因为自动创建了<code>__iter__()</code>和 <code>next()</code>方法,生成器显得特别简洁,而且生成器也是高效的。除了创建和保存程序状态的自动方法,当发生器终结时,还会自动抛出<code>StopIteration</code>异常。一个带有yield的函数就是一个 生成器,它和普通函数不同,生成一个 generator 看起来像函数调用,但不会执行任何函数代码,直到对其调用<code>next()</code>(在 for 循环中会自动调用<code>next()</code>)才开始执行。虽然执行流程仍按函数的流程执行,但每执行到一个yield语句就会中断,并返回一个迭代值,下次执行时从yield的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被yield中断了数次,每次中断都会通过yield返回当前的迭代值（<code>yield</code>暂停一个函数，<code>next()</code>从其暂停处恢复其运行）。</p>
<p>另外对于生成器，python还提供了一个生成器表达式：类似与一个yield值的匿名函数。表达式本身看起来像列表推到, 但不是用方括号而是用圆括号包围起来：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>unique_characters = &#123;<span class="string">'E'</span>, <span class="string">'D'</span>, <span class="string">'M'</span>, <span class="string">'O'</span>, <span class="string">'N'</span>, <span class="string">'S'</span>, <span class="string">'R'</span>, <span class="string">'Y'</span>&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>gen = (ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> unique_characters)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>gen</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x7f2be4668678</span>&gt;</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> gen:</span><br><span class="line"><span class="prompt">... </span>    print(i)</span><br><span class="line">...</span><br><span class="line"><span class="number">69</span></span><br><span class="line"><span class="number">79</span></span><br><span class="line"><span class="number">83</span></span><br><span class="line"><span class="number">77</span></span><br><span class="line"><span class="number">82</span></span><br><span class="line"><span class="number">78</span></span><br><span class="line"><span class="number">89</span></span><br><span class="line"><span class="number">68</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>如果需要，可以将生成器表达式传给tuple、list或是set来迭代所有的值并且返回元组、列表或是集合。在这种情况下，不需要一对额外的括号 ———— 直接将生成器表达式 <code>ord(c) for c in unique_characters</code>传给<code>tuple()</code>等函数就可以了, Python 会推断出它是一个生成器表达式。</p>
<p>为什么使用生成器，因为效率。使用生成器表达式取代列表解析可以同时节省 cpu 和 内存(ram)。如果你构造一个列表的目的仅仅是传递给别的函数,(比如 传递给<code>tuple()</code>或者<code>set()</code>), 那就用生成器表达式替代吧!</p>
<h3 id="装饰器">装饰器</h3><p>装饰器的语法以@开头，接着是装饰器函数的名字、可选参数。紧跟装饰器声明的是被装饰的函数和被装饰的函数的可选参数，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@decorator(dec_opt_args)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(func_args)</span>:</span></span><br><span class="line">  ....</span><br></pre></td></tr></table></figure>
<p>装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</p>
<p>先看一个简单的例子，定义一个求 <code>a</code> 和 <code>b</code> 平方和的例子，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#求矩形的面积</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    sum = a**<span class="number">2</span> + b**<span class="number">2</span></span><br><span class="line">	<span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></p>
<p>为了测量这个函数的执行时间，我们可能在函数开始执行先插入一段计时代码，在函数结束前再插入一段代码，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    start = time.clock()</span><br><span class="line">    sum = a**<span class="number">2</span> + b**<span class="number">2</span></span><br><span class="line">    end = time.clock()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'elapsed time:'</span>, end - start</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></p>
<p>函数在Python中是一等公民，那么我们可以考虑重新定义一个函数timeit，将foo的引用传递给他，然后在timeit中调用foo并进行计时，这样，我们就达到了不改动foo定义的目的，而且，不论B君看了多少个函数，我们都不用去修改函数定义了！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    sum = a**<span class="number">2</span> + b**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeie</span><span class="params">(func)</span>:</span></span><br><span class="line">    start = time.clock()</span><br><span class="line">    func()</span><br><span class="line">    end = time.clock()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'elapsed time:'</span>, end - start</span><br><span class="line"></span><br><span class="line">timeit(area)</span><br></pre></td></tr></table></figure>
<p>看起来逻辑上并没有问题，一切都很美好并且运作正常！……等等，我们似乎修改了调用部分的代码。原本我们是这样调用的：<code>foo()</code>，修改以后变成了：<code>timeit(foo)</code>。这样的话，如果foo在N处都被调用了，你就不得不去修改这N处的代码。或者更极端的，考虑其中某处调用的代码无法修改这个情况，比如：这个函数是你交给别人使用的。</p>
<p>接下来，我们使用python支持的装饰器语法，来实现一个装饰器：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start = time.clock()</span><br><span class="line">        func()</span><br><span class="line">        end = time.clock()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'elapsed time:'</span>, end - start</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="decorator">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    sum = a**<span class="number">2</span> + b**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">area(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>重点关注@timeit，在定义上加上这一行与另外写foo = timeit(foo)完全等价，千万不要以为@有另外的魔力。除了字符输入少了一些，还有一个额外的好处：这样看上去更有装饰器的感觉。</p>
<p><strong>内置的装饰器</strong></p>
<p>内置的装饰器有三个，分别是<code>staticmethod</code>、<code>classmethod</code>和<code>property</code>，作用分别是把类中定义的实例方法变成静态方法、类方法和类属性。由于模块里可以定义函数，所以静态方法和类方法的用处并不是太多，除非你想要完全的面向对象编程。而属性也不是不可或缺的，Java没有属性也一样活得很滋润。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rabbit</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line"><span class="decorator">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newRabbit</span><span class="params">(name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Rabbit(name)</span><br><span class="line"></span><br><span class="line"><span class="decorator">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newRabbit2</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Rabbit(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="decorator">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="迭代器">迭代器</h3><p>在Python中，对于string、list、dict、tuple等这类容器对象，使用for循环遍历是很方便的。在后台for语句对容器对象调用iter()函数，iter()是python的内置函数。iter()会返回一个定义了next()方法的迭代器对象，它在容器中逐个访问容器内元素，next()也是python的内置函数。在没有后续元素时，next()会抛出一个StopIteration异常，通知for语句循环结束。<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://science09.github.io/tags/python/"/>
    
      <category term="python" scheme="http://science09.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python开发者需要知道的服务器知识]]></title>
    <link href="http://science09.github.io/2015/09/17/python%E5%BC%80%E5%8F%91%E8%80%85%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9F%A5%E8%AF%86/"/>
    <id>http://science09.github.io/2015/09/17/python开发者需要知道的服务器知识/</id>
    <published>2015-09-17T14:06:23.000Z</published>
    <updated>2015-09-17T14:34:53.886Z</updated>
    <content type="html"><![CDATA[<h3 id="HTTP:_统治万维网的协议">HTTP: 统治万维网的协议</h3><p>HTTP(超文本传输协议)是一种通信协议，它被用来发送和接收因特网上的网页以及其他数据文件。它是一套规则和相关参数的集合，这些规则和参数控制着网页和其他数据文件在因特网上的传输。<br><a id="more"></a><br>浏览器是一个HTTP客户端，因为它会发送请求到一个HTTP服务器（网页服务器），HTTP服务器随后把响应发送回客户端。HTTP监听的标准（和默认）端口是80端口，尽管其实可以使用任何的端口。如果你想要钻研一下HTTP，请查看<a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html" target="_blank" rel="external">HTTP 1.1 specs</a> ，它已经被多种请求注解（RFCs(7230-7237)）所替代。你可以在ietf搜索这些请求注解。</p>
<h3 id="HTTP_服务器">HTTP 服务器</h3><p>因此，HTTP请求和响应有其特定的格式！当用户进入某个网站的时候，他们的浏览器与站点的网页服务器进行了连接（这个过程称之为请求）。服务器在文件系统中查询文件，并将其发送回用户的浏览器，浏览器会显示这些文件（这个过程称之为响应）。这便是HTTP协议的工作方式。看上去很简单？</p>
<p>动态网站并不基于文件系统中的文件，取而代之的是，当有请求到达的时候，由一个网站服务器上面运行的程序来处理。该程序会生成内容并将其返回给用户。它们可以做很多有用的事，比如显示BBS上的帖子，显示你的电子邮件，配置软件或是显示当前的时间。</p>
<p>不论客户端或者服务器是如何实现的，总有办法来生成有效的HTTP请求，让客户端正常工作，同样，服务器要能够理解发送给它的HTTP请求并且为所有到达的请求生成有效的HTTP响应。客户端和服务器都必须具有相互连接的能力（这种情况下会使用TCP进行可靠的连接），能够传输HTTP请求(客户端 -&gt; 服务器)和HTTP响应(服务器 -&gt; 客户端)。</p>
<p>HTTP服务器（是一个程序）会接受这些请求，并且会让你的python获取HTTP请求方法以及URI。HTTP服务器会处理很多来自图片和静态资源的请求。 那么它又是如何生成动态urls的呢？</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@app.route('displaynews_name_of_category',methods=['GET'])</span></span><br></pre></td></tr></table></figure>
<p>在Flask中你可能使用过这个装饰器，<a href="http://flask.pocoo.org/" target="_blank" rel="external">Flask</a> 是一个python微型框架。Flask会把来自浏览器的请求和该路由进行模式匹配。但是flask是如何解析来自浏览器的http请求的呢？HTTP服务器会把动态生成的urls传递给应用服务器。哇哦！等等。。应用服务器又是什么东西呢？</p>
<p>Apache的 HTTPD 和nginx是两个常用的python网站服务器。</p>
<h3 id="应用服务器">应用服务器</h3><p>大多数的HTTP服务器是由C或C++写成的，所以它们不能直接执行Python脚本——在服务器和程序之间，需要一个桥梁。这个桥梁，或者说是接口，定义了程序应该如何和服务器进行交互。这就是应用服务器。动态生成的urls从网站服务器传递到应用服务器。应用服务器对url进行匹配并执行该路由对应的脚本。然后它（应用服务器）把响应返回给网站服务器，网站服务器生成一个HTTP响应，并将其返回给客户端。</p>
<p>对于python来讲，有很多可以用的应用服务器。这个<a href="https://en.wikipedia.org/wiki/Comparison_of_application_servers#Python" target="_blank" rel="external">链接</a>列出了不同的应用服务器。起初，pyhton开发者们使用低层网关来进行部署。</p>
<h3 id="通用网关接口(CGI)">通用网关接口(CGI)</h3><p>这个接口，通常被称之为“CGI”，是最古老的应用服务器，它几乎被任何网站服务器所天生支持，无需专门安装。使用CGI和网站服务器进行通信的程序，需要针对每一个请求单独开启。所以每一个请求都会启动一个全新的Python解释器——这还是需要花费一点时间的——因此让整个接口只能用在低负载的情况下。</p>
<p>如果你想要学习如何编写一个CGI。请按照<a href="http://www.jmarshall.com/easy/cgi/" target="_blank" rel="external">JM Marshall的这篇教程</a> 去做。</p>
<p><strong>mod_python</strong></p>
<p><strong>mod_python</strong>是一个Apache HTTP 服务器模块，它在服务器上面集成了Python语言。在上世纪90年代和本世纪初期，大多数的Python web应用都运行在配置了 mod_python 的Apache 上。但是，mod_python并不是标准规范。在使用mod_python时会有一些问题 。Python web应用需要一种可持续的运作方式。</p>
<p><a href="https://docs.python.org/2/howto/webservers.html#fastcgi-and-scgi" target="_blank" rel="external">FastCgi and SCGI</a>是另一种用来部署的低层网关。它们尝试解决CGI的性能问题。这些低层的网关接口不依赖特定语言。<br>WSGI的崛起</p>
<p>一个Web服务器网关接口（WSGI）服务器为运行Python web应用实现了服务器端的WSGI接口。 WSGI适合各种规模并且可以在多线程或多进程环境下工作，我们同样可以使用WSGI编写中间件。中间件对于会话处理，授权和其他很多任务都非常有用。你可以在<a href="http://lucumr.pocoo.org/2007/5/21/getting-started-with-wsgi/" target="_blank" rel="external">Armin的博客</a>里面学到如何编写你自己的WSGI实现。<a href="https://www.digitalocean.com/community/tutorials/a-comparison-of-web-servers-for-python-based-web-applications" target="_blank" rel="external">这个链接</a>给出了不同WSGI实现的比较。</p>
<p>Gunicorn and uWSGI Gunicorn 和 uWSGI</p>
<p>Gunicorn 和 uWSGI 是两个不同的应用服务器。<a href="http://gunicorn-docs.readthedocs.org/en/latest/" target="_blank" rel="external">Gunicorn ‘Green Unicorn’</a>是一个为UNIX设计的Python WSGI HTTP服务器。配置非常简单，和多种web框架兼容，而且它足够的快。</p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-apps-using-gunicorn-http-server-behind-nginx" target="_blank" rel="external">digitalocean的这篇文章</a>讲解了如何配置gunicorn和nginx。</p>
<p>uWSGI 是另一种备选的应用服务器。uWSGI是一个高性能，强大的WSGI服务器。uWSGI有很多可配置选项， digitalocean的这篇文章 讲解了如何配置uWSGI和nginx。<br>Apache vs Nginx</p>
<p><a href="https://anturis.com/blog/nginx-vs-apache/" target="_blank" rel="external">Anturis 在他的博客</a>上已经非常清晰的阐述了两者之间的不同。这篇文章解释了apache和nginx是如何工作的。</p>
<p>总结一下：</p>
<ol>
<li>Apache 通过创建进程和线程来处理额外的连接。而Nginx被称为事件驱动，异步，并且非阻塞。</li>
<li>Apache非常强大但是Nginx非常快。Nginx可以更快呈现静态内容。</li>
<li>Nginx包含了先进的负载均衡以及缓存能力。</li>
<li>Nginx比Apache轻量级的多。</li>
</ol>
<p>organic agency对Apache和nginx进行了基准测试。结果可以在<a href="http://www.theorganicagency.com/apache-vs-nginx-performance-comparison/" target="_blank" rel="external">这里看到</a>。</p>
<h3 id="我用的是什么">我用的是什么</h3><p>我使用Nginx因为它很快、很轻巧，并且我发现配置它更容易。Gunicorn配置起来也很简单所以我用gunicorn。uWsgi也经常被用来替代gunicorn。</p>
<p>原文链接：<a href="http://python.jobbole.com/82009/" target="_blank" rel="external">http://python.jobbole.com/82009/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="HTTP:_统治万维网的协议">HTTP: 统治万维网的协议</h3><p>HTTP(超文本传输协议)是一种通信协议，它被用来发送和接收因特网上的网页以及其他数据文件。它是一套规则和相关参数的集合，这些规则和参数控制着网页和其他数据文件在因特网上的传输。<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://science09.github.io/tags/python/"/>
    
      <category term="web" scheme="http://science09.github.io/tags/web/"/>
    
      <category term="技术" scheme="http://science09.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[9个目前流行的Material Design前端框架]]></title>
    <link href="http://science09.github.io/2015/05/13/9%E4%B8%AA%E7%9B%AE%E5%89%8D%E6%B5%81%E8%A1%8C%E7%9A%84Material-Design%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>http://science09.github.io/2015/05/13/9个目前流行的Material-Design前端框架/</id>
    <published>2015-05-13T15:48:41.000Z</published>
    <updated>2015-09-10T14:16:37.497Z</updated>
    <content type="html"><![CDATA[<p>谷歌推出的Material Design风格已见有一些APP UI采用，视觉和交互体验都很棒，对于想尝试这个风格但又不懂实现一些效果的前端设计师们，可以试试今天设计达人网为大家分享的9个目前流行的Material Design前端框架。</p>
<a id="more"></a>
<p>这些前端框架的设计元素齐全，按钮、表单、布局及常用JS特效代码也有齐了，支持Responsive Design，还有的可以结合Bootstrap使用，相当不错，下面来看看介绍，并挑选一款你喜欢的Framework来制作你的新项目吧。</p>
<h3 id="Materialize">Materialize</h3><p>Materialize 是一个响应式的前端框架，设计样式及组件元素丰富。<br><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045516xAV.png" alt="Materialize"></p>
<p><a href="http://materializecss.com/" target="_blank" rel="external">查看框架</a></p>
<h3 id="Material_UI">Material UI</h3><p>Material UI 和上面的框架差不多，另外值得一提就是它自带的响应式日期选择很棒哦。<br><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045517J5c.png" alt="Material UI"></p>
<p><a href="http://material-ui.com/#/" target="_blank" rel="external">查看框架</a></p>
<h3 id="MUI">MUI</h3><p>MUI 是一个轻量级的Material Design框架，它的CSS和JS压缩版加起来不超过10KB，作者还提到可以用MUI的CSS来创建邮箱模板，支持流行的邮箱（如：Gmail, Apple Mail,Outlook等）</p>
<p><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045517iGV.png" alt="MUI"></p>
<p><a href="https://www.muicss.com/" target="_blank" rel="external">查看框架</a></p>
<h3 id="daemonite">daemonite</h3><p>daemonite 在之前的文章已经介绍过，轻量级。</p>
<p><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045521fAl.png" alt="daemonite"></p>
<p><a href="https://github.com/daemonite/material" target="_blank" rel="external">查看框架</a></p>
<h3 id="LumX">LumX</h3><p>LumX 这个前端框架主要是使用了Angular JS，针对手机端有不错的体验，如果懂Angular JS的建议使用这个框架。</p>
<p><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045521CdS.png" alt="LumX"></p>
<p><a href="http://ui.lumapps.com/" target="_blank" rel="external">查看框架</a></p>
<h3 id="Framaterial">Framaterial</h3><p>Framaterial 这个框架小编体验的时候，有的JS效果在桌面端感觉有点卡顿，动画不够流畅，但总体还是不错，有很丰富的组件元素。</p>
<p><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045521SBa.png" alt="Framaterial"></p>
<p><a href="http://framaterial.github.io/framaterial/" target="_blank" rel="external">查看框架</a></p>
<h3 id="Material_Framework">Material Framework</h3><p>Material Framework 这个前端框架有2组风格，一个是默认白色以及暗色调，缺点就是组件元素目前还不够多。</p>
<p><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045522mL6.png" alt="Material Framework"></p>
<p><a href="http://nt1m.github.io/material-framework/#introduction" target="_blank" rel="external">查看框架</a></p>
<h3 id="Material_Foundation">Material Foundation</h3><p>如果你懂得使用Foundation，那么这个前端框架可以选择了，直接为你的Foundation换肤。但组件还是有点少了。</p>
<p><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045522MAb.png" alt="Material Foundation"></p>
<p><a href="http://eucalyptuss.github.io/material-foundation/" target="_blank" rel="external">查看框架</a></p>
<h3 id="Material_Design_for_Bootstrap">Material Design for Bootstrap</h3><p>Material Design for Bootstrap 对于不想再去花时间了解新框架，并喜欢使用Bootstrap 的用户，那么你就用它吧。</p>
<p><img src="http://images.shejidaren.com/wp-content/uploads/2015/04/045523U4u.png" alt="Material Design for Bootstrap"></p>
<p><a href="http://fezvrasta.github.io/bootstrap-material-design/" target="_blank" rel="external">查看框架</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>谷歌推出的Material Design风格已见有一些APP UI采用，视觉和交互体验都很棒，对于想尝试这个风格但又不懂实现一些效果的前端设计师们，可以试试今天设计达人网为大家分享的9个目前流行的Material Design前端框架。</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://science09.github.io/tags/CSS/"/>
    
      <category term="Material" scheme="http://science09.github.io/tags/Material/"/>
    
      <category term="前端框架" scheme="http://science09.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="WEB" scheme="http://science09.github.io/categories/WEB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android面试题]]></title>
    <link href="http://science09.github.io/2015/02/02/Android%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://science09.github.io/2015/02/02/Android面试题/</id>
    <published>2015-02-02T15:56:56.000Z</published>
    <updated>2015-09-10T14:10:23.253Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_Android_ListView的优化">1. Android ListView的优化</h3><p> 1、使用Adapter提供的convertView<br>convertView是Adapter提供的视图缓存机制，当第一次显示数据的时候，adapter会创建n个（n等于页面可见的item的数目）convertView，当下次需要显示新的item的时候，adapter会循环利用这些已经创建的convertView，减少再次创建convertView所带来的开销，从而达到性能的提升。<br><a id="more"></a><br>2、使用自定义的视图缓存类<br>就是自定义一个视图缓存类，在这个类中保存我们在item中使用到的视图的引用，通过convertView的setTag方法和getTag方法来存储这个视图缓存类引用和重新获取这个视图缓存类引用，其目的也是为了减少重复创建视图时的开销。</p>
<p>3、减少不必要的视图更新<br>ListView在滚动时会请求重新获取item，来显示不同内容的item，而如果在获取item时比较耗时就会造成在滚动时出现卡顿的现象。那我们可以通过监听ListView的滚动事件来使ListView处于不同的滚动状态时做不同的事情，比如在ListView处于滚动过程中加载少量的显示数据，当ListView处于空闲的状态时再加载所有的数据，这样就可以减少ListView在滚动过程中的开销，从而提供ListView的滚动速度。</p>
<h3 id="2-_Activity的生命周期">2. Activity的生命周期</h3><p><img src="" alt=""></p>
<ol>
<li>整个的生命周期，从onCreate(Bundle)开始到onDestroy()结束。Activity在onCreate()设置所有的“全局”状态，在onDestory()释放所有的资源。例如：某个Activity有一个在后台运行的线程，用于从网络下载数据，则该Activity可以在onCreate()中创建线程,在onDestory()中停止线程。</li>
<li>可见的生命周期，从onStart()开始到onStop()结束。在这段时间，可以看到Activity在屏幕上，尽管有可能不在前台，不能和用户交互。在这两个接口之间，需要保持显示给用户的UI数据和资源等，例如：可以在onStart中注册一个IntentReceiver来监听数据变化导致UI的变动，当不再需要显示时候，可以在onStop()中注销它。onStart()，onStop()都可以被多次调用，因为Activity随时可以在可见和隐藏之间转换。</li>
<li>前台的生命周期，从onResume()开始到onPause()结束。在这段时间里，该Activity处于所有 Activity的最前面，和用户进行交互。Activity可以经常性地在resumed和paused状态之间切换，例如：当设备准备休眠时，当一个 Activity处理结果被分发时，当一个新的Intent被分发时。所以在这些接口方法中的代码应该属于非常轻量级的。</li>
</ol>
<h3 id="3-_Android的内存泄露">3. Android的内存泄露</h3><ol>
<li>查询数据库而没有关闭Cursor</li>
<li>调用registerReceiver后未调用unregisterReceiver().</li>
<li>未关闭InputStream/OutputStream</li>
<li>Bitmap使用后未调用recycle()</li>
<li>Activity中的对象的生命周期大于Activity</li>
</ol>
<h3 id="4-_Android的图片缓存原理">4. Android的图片缓存原理</h3><p>实现图片缓存也不难，需要有相应的cache策略。这里我采用 内存-文件-网络 三层cache机制，其中内存缓存包括强引用缓存和软引用缓存（SoftReference），其实网络不算cache，这里姑且也把它划到缓存的层次结构中。当根据url向网络拉取图片的时候，先从内存中找，如果内存中没有，再从缓存文件中查找，如果缓存文件中也没有，再从网络上通过http请求拉取图片。在键值对（key-value）中，这个图片缓存的key是图片url的hash值，value就是bitmap。所以，按照这个逻辑，只要一个url被下载过，其图片就被缓存起来了。</p>
<p>关于Java中对象的软引用（SoftReference），如果一个对象具有软引用，内存空间足够，垃 圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高 速缓存。使用软引用能防止内存泄露，增强程序的健壮性。</p>
<p>从代码上来说，采用一个ImageManager来负责图片的管理和缓存，函数接口为public void loadBitmap(String url, Handler handler) ；其中url为要下载的图片地址，handler为图片下载成功后的回调，在handler中处理message，而message中包含了图片的信息以及bitmap对象。</p>
<h3 id="5-_如何处理Android多分辨率适配问题">5. 如何处理Android多分辨率适配问题</h3><p> UI界面在不同平台的适配受屏幕尺寸和屏幕密度影响，Android适配机制就是在资源后面添加对这两种因素的限定，通过不同的限定区分不同的平台资源，Android在使用资源的时候会优先选择满足本平台限定的资源，再找最接近条件的，再找默认（即不加限定），通过选择适合当前平台的资源来完成不同平台的适配。</p>
<h3 id="6-_什么是ANR，如何防止">6. 什么是ANR，如何防止</h3><p>在Android上，如果你的应用程序有一段时间响应不够灵敏，系统会向用户显示一个对话框，这个对话框称作应用程序无响应（ANR：Application Not Responding）对话框。用户可以选择让程序继续运行，但是，他们在使用你的应用程序时，并不希望每次都要处理这个对话框。因此，在程序里对响应性能的设计很重要，这样，系统不会显示ANR给用户。</p>
<p>任何运行在主线程中的方法，都要尽可能的只做少量的工作。特别是活动生命周期中的重要方法如onCreate()和 onResume()等更应如此。潜在的比较耗时的操作，如访问网络和数据库;或者是开销很大的计算，比如改变位图的大小，需要在一个单独的子线程中完成(或者是使用异步请求，如数据库操作)。但这并不意味着你的主线程需要进入阻塞状态已等待子线程结束 – 也不需要调用Therad.wait()或者Thread.sleep()方法。取而代之的是，主线程为子线程提供一个句柄(Handler)，让子线程在即将结束的时候调用它(xing:可以参看Snake的例子，这种方法与以前我们所接触的有所不同)。使用这种方法涉及你的应用程序，能够保证你的程序对输入保持良好的响应，从而避免因为输入事件超过5秒钟不被处理而产生的ANR。</p>
<h3 id="7-_JNI调用过程">7. JNI调用过程</h3>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_Android_ListView的优化">1. Android ListView的优化</h3><p> 1、使用Adapter提供的convertView<br>convertView是Adapter提供的视图缓存机制，当第一次显示数据的时候，adapter会创建n个（n等于页面可见的item的数目）convertView，当下次需要显示新的item的时候，adapter会循环利用这些已经创建的convertView，减少再次创建convertView所带来的开销，从而达到性能的提升。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://science09.github.io/tags/Android/"/>
    
      <category term="面试" scheme="http://science09.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java面试常见问题]]></title>
    <link href="http://science09.github.io/2015/02/02/Java%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://science09.github.io/2015/02/02/Java面试常见问题/</id>
    <published>2015-02-02T14:32:16.000Z</published>
    <updated>2015-09-10T14:16:00.804Z</updated>
    <content type="html"><![CDATA[<h3 id="1-_final,finally,finalize的区别?">1. final,finally,finalize的区别?</h3><p>final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能重载。<br><a id="more"></a><br>finally—在异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会执行，然后控制就会进入 finally 块（如果有的话）。</p>
<p>finalize—方法名。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 类中定义的，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。</p>
<h3 id="2-_什么情况下你会使用ArrayList？什么时候你会选择LinkedList？">2. 什么情况下你会使用ArrayList？什么时候你会选择LinkedList？</h3><p>这又是一个大多数面试者都会困惑的问题。多数情况下，当你遇到访问元素比插入或者是删除元素更加频繁的时候，你应该使用ArrayList。另外一方面，当你在某个特别的索引中，插入或者是删除元素更加频繁，或者你压根就不需要访问元素的时候，你会选择LinkedList。这里的主要原因是，在ArrayList中访问元素的最糟糕的时间复杂度是”1″，而在LinkedList中可能就是”n”了。在ArrayList中增加或者删除某个元素，通常会调用System.arraycopy方法，这是一种极为消耗资源的操作，因此，在频繁的插入或者是删除元素的情况下，LinkedList的性能会更加好一点。</p>
<h3 id="3-_当传递ArrayList到某个方法中，或者某个方法返回ArrayList，什么时候要考虑安全隐患？如何修复安全违规这个问题呢？">3. 当传递ArrayList到某个方法中，或者某个方法返回ArrayList，什么时候要考虑安全隐患？如何修复安全违规这个问题呢？</h3><p>当array被当做参数传递到某个方法中，如果array在没有被复制的情况下直接被分配给了成员变量，那么就可能发生这种情况，即当原始的数组被调用的方法改变的时候，传递到这个方法中的数组也会改变。下面的这段代码展示的就是安全违规以及如何修复这个问题。</p>
<p>ArrayList被直接赋给成员变量——安全隐患：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyArray</span><span class="params">(String[] myArray)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.myArray = myArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修复这个安全隐患：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyArray</span><span class="params">(String[] newMyArray)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(newMyArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">    	<span class="keyword">this</span>.myArray = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    	<span class="keyword">this</span>.myArray = Arrays.copyOf(newMyArray, newMyArray.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-_如何复制某个ArrayList到另一个ArrayList中去？写出你的代码？">4. 如何复制某个ArrayList到另一个ArrayList中去？写出你的代码？</h3><p>下面就是把某个ArrayList复制到另一个ArrayList中去的几种技术：</p>
<ol>
<li>使用clone()方法，比如ArrayList newArray = oldArray.clone();</li>
<li>使用ArrayList构造方法，比如：ArrayList myObject = new ArrayList(myTempObject);</li>
<li>使用Collection的copy方法。</li>
</ol>
<p>注意1和2是浅拷贝(shallow copy)。</p>
<h3 id="5-_在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？">5. 在索引中ArrayList的增加或者删除某个对象的运行过程？效率很低吗？解释一下为什么？</h3><p>在ArrayList中增加或者是删除元素，要调用System.arraycopy这种效率很低的操作，如果遇到了需要频繁插入或者是删除的时候，你可以选择其他的Java集合，比如LinkedList。</p>
<h3 id="6-_错误和异常的区别(Error_vs_Exception)">6. 错误和异常的区别(Error vs Exception)</h3><p>1)  error都是继承自父类java.lang.Error，而exception都继承自java.lang.Exception.</p>
<p>2) java.lang.Error: An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch. Most such errors are abnormal conditions. 即：Error是Throwable的子类，用于标记严重错误。合理的应用程序不应该去try/catch这种错误。绝大多数的错误都是非正常的，就根本不该出现的。     java.lang.Exception: The class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application might want to catch. 即Exception 是Throwable的一种形式的子类，用于指示一种合理的程序想去catch的条件。即它仅仅是一种程序运行条件，而非严重错误，并且鼓励用户程序去catch它。</p>
<p>3)  Error和RuntimeException 及其子类都是未检查的异常（unchecked exceptions），而所有其他的Exception类都是检查了的异常（checked exceptions）.<br>checked exceptions: 通常是从一个可以恢复的程序中抛出来的，并且最好能够从这种异常中使用程序恢复。比如FileNotFoundException, ParseException等。<br>unchecked exceptions: 通常是如果一切正常的话本不该发生的异常，但是的确发生了。比如ArrayIndexOutOfBoundException, ClassCastException等。从语言本身的角度讲，程序不该去catch这类异常，虽然能够从诸如RuntimeException这样的异常中catch并恢复，但是并不鼓励终端程序员这么做，因为完全没要必要。因为这类错误本身就是bug，应该被修复，出现此类错误时程序就应该立即停止执行。 因此，面对Errors和unchecked exceptions应该让程序自动终止执行，程序员不该做诸如try/catch这样的事情，而是应该查明原因，修改代码逻辑。</p>
<h3 id="7-_String是最基本的数据类型吗?">7. String是最基本的数据类型吗?</h3><p>基本数据类型包括byte、int、char、long、float、double、boolean和short。</p>
<p>java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类</p>
<h3 id="8-_说出ArrayList,Vector,_LinkedList的存储性能和特性">8. 说出ArrayList,Vector, LinkedList的存储性能和特性</h3><p>ArrayList 和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</p>
<h3 id="9-_abstract_class和interface有什么区别?">9. abstract class和interface有什么区别?</h3><p>声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract 类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。Abstract 类的子类为它们父类中的所有抽象方法提供实现，否则它们也是抽象类为。取而代之，在子类中实现该方法。知道其行为的其它类可以在类中实现这些方法。</p>
<p>接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static final成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。</p>
<h3 id="10-_垃圾回收的优点和原理。并考虑2种回收机制。">10. 垃圾回收的优点和原理。并考虑2种回收机制。</h3><p>Java语言中一个显着的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存管理。由于有个垃圾回收机制， Java中的对象不再有”作用域”的概念，只有对象的引用才有”作用域”。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。回收机制有分代复制垃圾回收和标记垃圾回收，增量垃圾回收。</p>
<h3 id="11-_请说出你所知道的线程同步的方法。">11. 请说出你所知道的线程同步的方法。</h3><p>wait():使一个线程处于等待状态，并且释放所持有的对象的lock。</p>
<p>sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。</p>
<p>notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。</p>
<p>Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。</p>
<h3 id="12-_Java中的设计模式">12. Java中的设计模式</h3><p>Java中的23种设计模式：</p>
<p>Factory（工厂模式），Builder（建造模式），Factory Method（工厂方法模式），Prototype（原始模型模式），Singleton（单例模式），Facade（门面模式），Adapter（适配器模式），Bridge（桥梁模式），Composite（合成模式），Decorator（装饰模式），Flyweight（享元模式），Proxy（代理模式），Command（命令模式），Interpreter（解释器模式），Visitor（访问者模式），Iterator（迭代子模式），Mediator（调停者模式），Memento（备忘录模式），Observer（观察者模式），State（状态模式），Strategy（策略模式），Template Method（模板方法模式），Chain Of Responsibleity（责任链模式）</p>
<p>工厂模式：工厂模式是一种经常被使用到的模式，根据工厂模式实现的类可以根据提供的数据生成一组类中某一个类的实例，通常这一组类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作。首先需要定义一个基类，该类的子类通过不同的方法实现了基类中的方法。然后需要定义一个工厂类，工厂类可以根据条件生成不同的子类实例。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="1-_final,finally,finalize的区别?">1. final,finally,finalize的区别?</h3><p>final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为final的方法也同样只能使用，不能重载。<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://science09.github.io/tags/Java/"/>
    
      <category term="面试" scheme="http://science09.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Java" scheme="http://science09.github.io/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android解析XML格式数据]]></title>
    <link href="http://science09.github.io/2015/01/31/Android%E8%A7%A3%E6%9E%90XML%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/"/>
    <id>http://science09.github.io/2015/01/31/Android解析XML格式数据/</id>
    <published>2015-01-31T15:41:36.000Z</published>
    <updated>2015-09-10T13:21:49.599Z</updated>
    <content type="html"><![CDATA[<p>XML在各种开发中都广泛应用，Android也不例外。作为承载数据的一个重要角色，如何读写XML成为Android开发中一项重要的技能。今天就由我向大家介绍一下在Android平台下几种常见的XML解析和创建的方法。<br><a id="more"></a><br>在Android中，常见的XML解析器分别为SAX解析器、DOM解析器和PULL解析器，下面，我将一一向大家详细介绍。</p>
<h3 id="SAX解析器：">SAX解析器：</h3><p>SAX(Simple API for XML)解析器是一种基于事件的解析器，它的核心是事件处理模式，主要是围绕着事件源以及事件处理器来工作的。当事件源产生事件后，调用事件处理器相应的处理方法，一个事件就可以得到处理。在事件源调用事件处理器中特定方法的时候，还要传递给事件处理器相应事件的状态信息，这样事件处理器才能够根据提供的事件信息来决定自己的行为。</p>
<p>SAX解析器的优点是解析速度快，占用内存少。非常适合在Android移动设备中使用。</p>
<h3 id="DOM解析器：">DOM解析器：</h3><p>DOM是基于树形结构的的节点或信息片段的集合，允许开发人员使用DOM API遍历XML树、检索所需数据。分析该结构通常需要加载整个文档和构造树形结构，然后才可以检索和更新节点信息。</p>
<p>由于DOM在内存中以树形结构存放，因此检索和更新效率会更高。但是对于特别大的文档，解析和加载整个文档将会很耗资源。</p>
<h3 id="PULL解析器：">PULL解析器：</h3><p>PULL解析器的运行方式和SAX类似，都是基于事件的模式。不同的是，在PULL解析过程中，我们需要自己获取产生的事件然后做相应的操作，而不像SAX那样由处理器触发一种事件的方法，执行我们的代码。PULL解析器小巧轻便，解析速度快，简单易用，非常适合在Android移动设备中使用，Android系统内部在解析各种XML时也是用PULL解析器。</p>
<p>以上三种解析器，都是非常实用的解析器，我将会一一介绍。我们将会使用这三种解析技术完成一项共同的任务。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>XML在各种开发中都广泛应用，Android也不例外。作为承载数据的一个重要角色，如何读写XML成为Android开发中一项重要的技能。今天就由我向大家介绍一下在Android平台下几种常见的XML解析和创建的方法。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://science09.github.io/tags/Android/"/>
    
      <category term="XML解析" scheme="http://science09.github.io/tags/XML%E8%A7%A3%E6%9E%90/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android App 性能优化实践]]></title>
    <link href="http://science09.github.io/2015/01/31/Android-App-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/"/>
    <id>http://science09.github.io/2015/01/31/Android-App-性能优化实践/</id>
    <published>2015-01-31T15:36:46.000Z</published>
    <updated>2015-09-10T13:16:39.777Z</updated>
    <content type="html"><![CDATA[<h2 id="工具">工具</h2><p>Hierarchy Viewer 是 Android SDK 自带的 Layout 嵌套检查工具，以可视化的布局角度直观获取 Layout 布局设计和各种属性信息，来帮助我们完成优化布局的设计。需要注意的是，出于安全考虑 Hierarchy Viewer 只能连接Android开发版手机(需要安装ViewServer)或是模拟器。<br><a id="more"></a><br><img src="D:\Study_Material\建站资料\博客文章\PicResource\performance-tuning-on-android-1.png" alt=""></p>
<p>注意上图右半部分显示的时间</p>
<ul>
<li>Measure： 0.977ms</li>
<li>Layout： 0.167ms</li>
<li>Draw： 2.717ms</li>
</ul>
<p>我们知道Android View在绘制图形的时候主要耗时的操作就在 Measure、Layout 和 Draw 这三个过程；并且任何一个 View 绘制时间不能超过 16.7ms(每秒60帧才能保证流畅度)。</p>
<p>如果 UI 出现卡顿或掉帧，那么 Hierarchy Viewer 这个工具及其有用，可以分析当前 View 是哪些 View 以及是 View 的哪个过程加载延迟，通过这些信息基本可定位到局部 Code。</p>
<h4 id="如何让QC快速追踪和定位性能问题？">如何让QC快速追踪和定位性能问题？</h4><p>当然使用 Android 开发者工具里的 <a href="http://developer.android.com/about/versions/jelly-bean.html" target="_blank" rel="external">Profile GPU rendering (GPU呈现模式分析)</a> 工具(Android4.1以上)。它能够从屏幕上活动的所有Android Activity生成性能视图，其中绿线代表 16ms，频繁超过此线的 Activity 就要排查性能问题了。</p>
<h4 id="如何定位到某个方法？">如何定位到某个方法？</h4><p>用 Hierarchy Viewer 知道是哪一个子 View 耗时比较多，找到此 View 的Code，那么如何定位到具体某个方法里呢？ 当然需要 <a href="http://developer.android.com/tools/debugging/debugging-tracing.html" target="_blank" rel="external">traceview</a> 工具。traceview 工具十分强大，可以轻松把每个方法占用 CPU 时间计算出来，找到占用时间最长的方法，然后分析此方法即可。</p>
<p>Lint 工具已经集成于 Android Studio，同样是非常强大的工具。它会给出 Layout 优化提示(既包括图片资源、layout文件，也有定义的String常量和Color常量以及Layout写法不规范)，告诉你哪些资源没有被引用，Manifest文件的错误等；我主要用 lint 来哪些资源文件没有被引用到(给APK瘦身)，以及部分代码不规范的地方。</p>
<h4 id="内存优化工具">内存优化工具</h4><p>Memory Monitor：查看整个app所占用的内存，以及发生GC的时刻，短时间内发生大量的GC操作是一个危险的信号(发生内存抖动)。</p>
<p>Allocation Tracker：追踪内存的分配。</p>
<p>Heap Tool：查看当前内存快照，便于对比分析哪些对象有可能是泄漏了的。</p>
<h2 id="布局优化">布局优化</h2><h4 id="布局标签">布局标签</h4><p><include> 标签，将布局中公共部分提取出来共用；例如网易新闻一条新闻的标题栏和评论界面的标题栏。</include></p>
<p><viewstub> 标签，同 include，可引入布局，但是默认情况引入的布局不会占用资源，在解析当前 Layout 时节省计算、内存资源。当需要加载此 View 的时候，需要动态 inflate 起来。</viewstub></p>
<blockquote>
<p> Tips：将一个view设置为GONE不会被系统解析，从而提高layout解析速度，而VISIBLE和INVISIBLE这两个可见性属性会被正常解析。</p>
</blockquote>
<p><merge> 标签，解决 Layout 嵌套过多的问题，通过工具通过 hierarchy viewer 可直观的显示出来。</merge></p>
<h4 id="其他">其他</h4><p>减少 inflate 次数：inflate 是比较耗资源的，当内存够用时，可以将 View 缓存起来，下次直接使用；用空间换时间。</p>
<h2 id="代码Tips">代码Tips</h2><p><a href="http://www.trinea.cn/android/java-android-performance/" target="_blank" rel="external">性能优化之Java(Android)代码优化</a>，这篇博客详细介绍了如何进行代码优化，包括缓存、数据存储、异步、数据库和网络等操作的优化。</p>
<p>关于缓存，上文没有提到一个重要的库：DiskLruCache；DiskLruCache 是关于数据硬盘缓存的，<a href="http://blog.csdn.net/guolin_blog/article/details/28863651" target="_blank" rel="external">Android DiskLruCache</a>完全解析，硬盘缓存的最佳方案 这篇博客详细介绍了 DiskLruCache 使用方法和注意事项。</p>
<p><strong>避免随意使用静态变量</strong>，当某个对象被定义为stataic变量所引用，虚拟机通常是不会回收这个对象所占有的内存。</p>
<p>避免过多过常的创建java对象，JVM 创建和回收耗时，频繁使用对象，最好创建缓存；每次回收对象，都是 STW(Stop the World)，所以如果对象过多，可能引起卡顿(大于16ms，引起掉帧)。可用 Memory Monitor 或 Allocation Tracker 工具来查看这类问题。</p>
<p><strong>多使用局部变量</strong>，函数执行完，就释放内存被虚拟机回收。</p>
<p><strong>使用StringBuilder和StringBuffer进行字符串连接</strong>，尤其在做 SQL 拼装的时候。</p>
<p><strong>单线程应尽量使用HashMap, ArrayList</strong>，如果不确定是单线程还是多线程，建议还是用 ConcurrentHashMap…</p>
<p><strong>尽量在finally块中释放资源</strong>，例如很多 Cursor。</p>
<p><strong>慎用异常</strong>，创建一个异常时，需收集一个栈记录(stack track)，用于描述异常是在何处创建的。构建这些此栈时需要为运行时栈做一份快照，这一部分开销很大。</p>
<h2 id="View绘制">View绘制</h2><h4 id="过度绘制问题">过度绘制问题</h4><p>为什么会出现过度绘制：多个 View 重叠，复杂 Layout 叠加；导致 GPU 需要绘制多层，有些时候非常耗时。</p>
<p><a href="http://www.androidperformance.com/android-performance-optimization-overdraw-1.html" target="_blank" rel="external">Android性能优化之过渡绘制</a>，这篇博客作者用实例来解决过度绘制的问题，解决过度绘制问题时，作者也使用了我们上面介绍的几个工具。</p>
<h4 id="View局部更新">View局部更新</h4><p>一些复杂的 View，如果每次 View 有局部更新都要重新绘制 View的话，GPU 会显得力不从心。通过canvas.clipRect() 方法来让系统识别可绘制区域。这个方法可以指定一块矩形区域，只有在这个区域内才会被绘制，其他的区域会被忽视。clipRect方法节约了CPU与GPU资源，不会绘制clipRect区域外的地方，仅仅绘制内容在矩形区域内的组件。</p>
<h2 id="电量优化">电量优化</h2><p>尽量减少唤醒屏幕的次数与持续的时间(屏幕是用电大户)，用WakeLock来处理唤醒的问题，能够正确执行唤醒操作并根据设定及时关闭操作进入睡眠状态，使用 wakelock.acquice() 方法，一定要加上超时处理(例如释放锁)。</p>
<p>等到设备处于充电状态或者电量充足的时候才进行耗时耗电操作(如分享传送数据、图片处理等)</p>
<p>触发网络请求的操作，每次都会保持无线信号持续一段时间，我们可以把零散的网络请求打包进行一次操作，避免过多的无线信号引起的电量消耗(例如APP的数据采集)。</p>
<p>Battery Historian Tool(Android 5.0)这个工具可以详细查看各类应用的用电情况。</p>
<h2 id="APK_瘦身">APK 瘦身</h2><h4 id="代码瘦身">代码瘦身</h4><p>库的使用可以极大方便开发者快速开发产品，但也引入了潜在的 bug 以及库过大导致APK过大的问题。移除没有用的 dependency libraries 是一个很好的建议。另外适当的给库瘦身(提取自己想要的功能)也很重要。如果对 APK 代码非常熟悉可以使用 Proguard （会遍历你的所有代码然后找出无用处的代码）优化。</p>
<h4 id="控制资源文件">控制资源文件</h4><p>剔除没有用的资源文件(使用 Lint 可轻松检测到)。</p>
<p>资源里的照片先进行压缩再使用。合适的时候可以用代码控制图片大小作为不同分辨率屏幕的资源。</p>
<p>为应用提供 hdpi, xhdpi 和 xxhdpi 这几个屏幕密度的支持。如果某些设备不是这几个屏幕密度的，不用担心，Android 系统会自动使用存在的资源为设备计算然后提供资源文件。</p>
<h2 id="总结">总结</h2><p>出现卡顿的根本原因：系统绘制 View 超过 16ms，出现掉帧才导致卡顿或不流畅。解决方法：</p>
<ul>
<li>Hierarchy Viewer，Profile GPU rendering，traceview</li>
<li>抽象布局标签，使用标签 include、viewstub、merge</li>
<li>多使用缓存</li>
<li>尽量避免过度绘制</li>
<li>自定义复杂 View，动态更新 View 内容</li>
<li>正确使用 wakelock，保持 App 用电量</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="工具">工具</h2><p>Hierarchy Viewer 是 Android SDK 自带的 Layout 嵌套检查工具，以可视化的布局角度直观获取 Layout 布局设计和各种属性信息，来帮助我们完成优化布局的设计。需要注意的是，出于安全考虑 Hierarchy Viewer 只能连接Android开发版手机(需要安装ViewServer)或是模拟器。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://science09.github.io/tags/Android/"/>
    
      <category term="性能优化" scheme="http://science09.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Volley自定义XML Request请求]]></title>
    <link href="http://science09.github.io/2015/01/31/%E4%BD%BF%E7%94%A8Volley%E8%87%AA%E5%AE%9A%E4%B9%89XML-Request%E8%AF%B7%E6%B1%82/"/>
    <id>http://science09.github.io/2015/01/31/使用Volley自定义XML-Request请求/</id>
    <published>2015-01-31T14:11:10.000Z</published>
    <updated>2015-09-10T14:11:01.783Z</updated>
    <content type="html"><![CDATA[<p>谷歌官方提供的Volley包中，已经提供了多种Request，如StringRequest， JsonRequest，ImageRequest等。谷歌官方只提供了Json请求封装，用于请求一条JSON格式的数据。目前，网络上传输的数据通常有两种方式，JSON和XML。今天我们就来自定义自己的XML请求。<br><a id="more"></a></p>
<h2 id="自定义XMLRequest">自定义XMLRequest</h2><p>自定义一个XMLRequest用于请求一条XML格式的网络数据。在自定义XMLRequest之前，可以先参考StringRequest类的实现，然后模仿StringRequest就可以写出XMLRequest。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRequest</span> <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener&lt;String&gt; mListener;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates a new request with the given method.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> method the request &#123;<span class="doctag">@link</span> Method&#125; to use</span><br><span class="line">     * <span class="doctag">@param</span> url URL to fetch the string at</span><br><span class="line">     * <span class="doctag">@param</span> listener Listener to receive the String response</span><br><span class="line">     * <span class="doctag">@param</span> errorListener Error listener, or null to ignore errors</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Listener&lt;String&gt; listener,</span><br><span class="line">            ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(method, url, errorListener);</span><br><span class="line">        mListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates a new GET request.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> url URL to fetch the string at</span><br><span class="line">     * <span class="doctag">@param</span> listener Listener to receive the String response</span><br><span class="line">     * <span class="doctag">@param</span> errorListener Error listener, or null to ignore errors</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringRequest</span><span class="params">(String url, Listener&lt;String&gt; listener, ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Method.GET, url, listener, errorListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">        mListener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;String&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        String parsed;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parsed = <span class="keyword">new</span> String(response.data, HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            parsed = <span class="keyword">new</span> String(response.data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过源码，我们可以看到，StringRequst继承自Requst类，Requst可以指定一个泛型类，这里指定的是String类。接着StringRequest实现了两个有参构造函数。StringRequest实现了deliverResponse方法和parseNetworkResponse方法，这两个方法在Request中都是抽象方法，因此需要在子类中进行实现。deliverResponse()方法中的实现很简单，仅仅是调用了mListener中的onResponse()方法，并将response内容传入即可，这样就可以将服务器响应的数据进行回调了。parseNetworkResponse()方法中则应该对服务器响应的数据进行解析，其中数据是以字节的形式存放在NetworkResponse的data变量中的，这里将数据取出然后组装成一个String，并传入Response的success()方法中即可。</p>
<p>了解了StringRequest的实现方法之后，我们可以实现自己的XMLRequest了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLRequest</span> <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">XmlPullParser</span>&gt; </span>&#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener&lt;XmlPullParser&gt; mListener;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XMLRequest</span><span class="params">(<span class="keyword">int</span> method, String url, Listener&lt;XmlPullParser&gt; listener,  </span><br><span class="line">              ErrorListener errorListener)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(method, url, errorListener);  </span><br><span class="line">        mListener = listener;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XMLRequest</span><span class="params">(String url, Listener&lt;XmlPullParser&gt; listener, ErrorListener errorListener)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>(Method.GET, url, listener, errorListener);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;XmlPullParser&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                String xmlString = <span class="keyword">new</span> String(response.data,  </span><br><span class="line">                        HttpHeaderParser.parseCharset(response.headers));  </span><br><span class="line">                XmlPullParserFactory factory = XmlPullParserFactory.newInstance();  </span><br><span class="line">                XmlPullParser xmlPullParser = factory.newPullParser();  </span><br><span class="line">                xmlPullParser.setInput(<span class="keyword">new</span> StringReader(xmlString));  </span><br><span class="line">                <span class="keyword">return</span> Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;  </span><br><span class="line">                <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;  </span><br><span class="line">                <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));  </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span> </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(XmlPullParser response)</span> </span>&#123;  </span><br><span class="line">            mListener.onResponse(response);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>基本都是仿照StringRequest写下来的，XMLRequest也是继承自Request类的，只不过这里指定的泛型类是XmlPullParser，说明我们准备使用Pull解析的方式来解析XML。在parseNetworkResponse()方法中，先是将服务器响应的数据解析成一个字符串，然后设置到XmlPullParser对象中，在deliverResponse()方法中则是将XmlPullParser对象进行回调。</p>
<p>完成了自定义XMLRequest，我们准备一个实例来测试一下XMLRequest。我们准备访问 <a href="http://flash.weather.com.cn/wmaps/xml/china.xml，" target="_blank" rel="external">http://flash.weather.com.cn/wmaps/xml/china.xml，</a> 这个链接会以XML格式返回所有省份的天气数据。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">china</span> <span class="attribute">dn</span>=<span class="value">"nay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"黑龙江"</span> <span class="attribute">pyName</span>=<span class="value">"heilongjiang"</span> <span class="attribute">cityname</span>=<span class="value">"哈尔滨"</span> <span class="attribute">state1</span>=<span class="value">"0"</span> <span class="attribute">state2</span>=<span class="value">"0"</span> <span class="attribute">stateDetailed</span>=<span class="value">"晴"</span> <span class="attribute">tem1</span>=<span class="value">"-20"</span> <span class="attribute">tem2</span>=<span class="value">"-8"</span> <span class="attribute">windState</span>=<span class="value">"西南风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"吉林"</span> <span class="attribute">pyName</span>=<span class="value">"jilin"</span> <span class="attribute">cityname</span>=<span class="value">"长春"</span> <span class="attribute">state1</span>=<span class="value">"0"</span> <span class="attribute">state2</span>=<span class="value">"0"</span> <span class="attribute">stateDetailed</span>=<span class="value">"晴"</span> <span class="attribute">tem1</span>=<span class="value">"-18"</span> <span class="attribute">tem2</span>=<span class="value">"-6"</span> <span class="attribute">windState</span>=<span class="value">"西南风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"辽宁"</span> <span class="attribute">pyName</span>=<span class="value">"liaoning"</span> <span class="attribute">cityname</span>=<span class="value">"沈阳"</span> <span class="attribute">state1</span>=<span class="value">"0"</span> <span class="attribute">state2</span>=<span class="value">"0"</span> <span class="attribute">stateDetailed</span>=<span class="value">"晴"</span> <span class="attribute">tem1</span>=<span class="value">"-20"</span> <span class="attribute">tem2</span>=<span class="value">"-1"</span> <span class="attribute">windState</span>=<span class="value">"东风转西南风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"海南"</span> <span class="attribute">pyName</span>=<span class="value">"hainan"</span> <span class="attribute">cityname</span>=<span class="value">"海口"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云"</span> <span class="attribute">tem1</span>=<span class="value">"17"</span> <span class="attribute">tem2</span>=<span class="value">"20"</span> <span class="attribute">windState</span>=<span class="value">"东北风3-4级转微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"内蒙古"</span> <span class="attribute">pyName</span>=<span class="value">"neimenggu"</span> <span class="attribute">cityname</span>=<span class="value">"呼和浩特"</span> <span class="attribute">state1</span>=<span class="value">"14"</span> <span class="attribute">state2</span>=<span class="value">"14"</span> <span class="attribute">stateDetailed</span>=<span class="value">"小雪"</span> <span class="attribute">tem1</span>=<span class="value">"-13"</span> <span class="attribute">tem2</span>=<span class="value">"-4"</span> <span class="attribute">windState</span>=<span class="value">"微风转南风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"新疆"</span> <span class="attribute">pyName</span>=<span class="value">"xinjiang"</span> <span class="attribute">cityname</span>=<span class="value">"乌鲁木齐"</span> <span class="attribute">state1</span>=<span class="value">"0"</span> <span class="attribute">state2</span>=<span class="value">"0"</span> <span class="attribute">stateDetailed</span>=<span class="value">"晴"</span> <span class="attribute">tem1</span>=<span class="value">"-19"</span> <span class="attribute">tem2</span>=<span class="value">"-12"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"西藏"</span> <span class="attribute">pyName</span>=<span class="value">"xizang"</span> <span class="attribute">cityname</span>=<span class="value">"拉萨"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"0"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云转晴"</span> <span class="attribute">tem1</span>=<span class="value">"-8"</span> <span class="attribute">tem2</span>=<span class="value">"6"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"青海"</span> <span class="attribute">pyName</span>=<span class="value">"qinghai"</span> <span class="attribute">cityname</span>=<span class="value">"西宁"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"0"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云转晴"</span> <span class="attribute">tem1</span>=<span class="value">"-14"</span> <span class="attribute">tem2</span>=<span class="value">"3"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"宁夏"</span> <span class="attribute">pyName</span>=<span class="value">"ningxia"</span> <span class="attribute">cityname</span>=<span class="value">"银川"</span> <span class="attribute">state1</span>=<span class="value">"14"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"小雪转多云"</span> <span class="attribute">tem1</span>=<span class="value">"-9"</span> <span class="attribute">tem2</span>=<span class="value">"0"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"甘肃"</span> <span class="attribute">pyName</span>=<span class="value">"gansu"</span> <span class="attribute">cityname</span>=<span class="value">"兰州"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"0"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云转晴"</span> <span class="attribute">tem1</span>=<span class="value">"-10"</span> <span class="attribute">tem2</span>=<span class="value">"4"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"河北"</span> <span class="attribute">pyName</span>=<span class="value">"hebei"</span> <span class="attribute">cityname</span>=<span class="value">"石家庄"</span> <span class="attribute">state1</span>=<span class="value">"0"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"晴转多云"</span> <span class="attribute">tem1</span>=<span class="value">"-5"</span> <span class="attribute">tem2</span>=<span class="value">"2"</span> <span class="attribute">windState</span>=<span class="value">"微风转南风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"河南"</span> <span class="attribute">pyName</span>=<span class="value">"henan"</span> <span class="attribute">cityname</span>=<span class="value">"郑州"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云"</span> <span class="attribute">tem1</span>=<span class="value">"-4"</span> <span class="attribute">tem2</span>=<span class="value">"4"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"湖北"</span> <span class="attribute">pyName</span>=<span class="value">"hubei"</span> <span class="attribute">cityname</span>=<span class="value">"武汉"</span> <span class="attribute">state1</span>=<span class="value">"6"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"雨夹雪转阴"</span> <span class="attribute">tem1</span>=<span class="value">"-1"</span> <span class="attribute">tem2</span>=<span class="value">"4"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"湖南"</span> <span class="attribute">pyName</span>=<span class="value">"hunan"</span> <span class="attribute">cityname</span>=<span class="value">"长沙"</span> <span class="attribute">state1</span>=<span class="value">"6"</span> <span class="attribute">state2</span>=<span class="value">"7"</span> <span class="attribute">stateDetailed</span>=<span class="value">"雨夹雪转小雨"</span> <span class="attribute">tem1</span>=<span class="value">"1"</span> <span class="attribute">tem2</span>=<span class="value">"3"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"山东"</span> <span class="attribute">pyName</span>=<span class="value">"shandong"</span> <span class="attribute">cityname</span>=<span class="value">"济南"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云"</span> <span class="attribute">tem1</span>=<span class="value">"-5"</span> <span class="attribute">tem2</span>=<span class="value">"4"</span> <span class="attribute">windState</span>=<span class="value">"南风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"江苏"</span> <span class="attribute">pyName</span>=<span class="value">"jiangsu"</span> <span class="attribute">cityname</span>=<span class="value">"南京"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴"</span> <span class="attribute">tem1</span>=<span class="value">"-1"</span> <span class="attribute">tem2</span>=<span class="value">"6"</span> <span class="attribute">windState</span>=<span class="value">"东北风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"安徽"</span> <span class="attribute">pyName</span>=<span class="value">"anhui"</span> <span class="attribute">cityname</span>=<span class="value">"合肥"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"6"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴转雨夹雪"</span> <span class="attribute">tem1</span>=<span class="value">"0"</span> <span class="attribute">tem2</span>=<span class="value">"4"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"山西"</span> <span class="attribute">pyName</span>=<span class="value">"shanxi"</span> <span class="attribute">cityname</span>=<span class="value">"太原"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云"</span> <span class="attribute">tem1</span>=<span class="value">"-9"</span> <span class="attribute">tem2</span>=<span class="value">"2"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"陕西"</span> <span class="attribute">pyName</span>=<span class="value">"sanxi"</span> <span class="attribute">cityname</span>=<span class="value">"西安"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴"</span> <span class="attribute">tem1</span>=<span class="value">"-4"</span> <span class="attribute">tem2</span>=<span class="value">"3"</span> <span class="attribute">windState</span>=<span class="value">"南风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"四川"</span> <span class="attribute">pyName</span>=<span class="value">"sichuan"</span> <span class="attribute">cityname</span>=<span class="value">"成都"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴"</span> <span class="attribute">tem1</span>=<span class="value">"2"</span> <span class="attribute">tem2</span>=<span class="value">"5"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"云南"</span> <span class="attribute">pyName</span>=<span class="value">"yunnan"</span> <span class="attribute">cityname</span>=<span class="value">"昆明"</span> <span class="attribute">state1</span>=<span class="value">"3"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阵雨转多云"</span> <span class="attribute">tem1</span>=<span class="value">"6"</span> <span class="attribute">tem2</span>=<span class="value">"18"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"贵州"</span> <span class="attribute">pyName</span>=<span class="value">"guizhou"</span> <span class="attribute">cityname</span>=<span class="value">"贵阳"</span> <span class="attribute">state1</span>=<span class="value">"19"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"冻雨转阴"</span> <span class="attribute">tem1</span>=<span class="value">"-3"</span> <span class="attribute">tem2</span>=<span class="value">"2"</span> <span class="attribute">windState</span>=<span class="value">"东北风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"浙江"</span> <span class="attribute">pyName</span>=<span class="value">"zhejiang"</span> <span class="attribute">cityname</span>=<span class="value">"杭州"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"7"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴转小雨"</span> <span class="attribute">tem1</span>=<span class="value">"2"</span> <span class="attribute">tem2</span>=<span class="value">"7"</span> <span class="attribute">windState</span>=<span class="value">"微风转东北风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"福建"</span> <span class="attribute">pyName</span>=<span class="value">"fujian"</span> <span class="attribute">cityname</span>=<span class="value">"福州"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴转多云"</span> <span class="attribute">tem1</span>=<span class="value">"6"</span> <span class="attribute">tem2</span>=<span class="value">"13"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"江西"</span> <span class="attribute">pyName</span>=<span class="value">"jiangxi"</span> <span class="attribute">cityname</span>=<span class="value">"南昌"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴"</span> <span class="attribute">tem1</span>=<span class="value">"2"</span> <span class="attribute">tem2</span>=<span class="value">"5"</span> <span class="attribute">windState</span>=<span class="value">"北风3-4级转微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"广东"</span> <span class="attribute">pyName</span>=<span class="value">"guangdong"</span> <span class="attribute">cityname</span>=<span class="value">"广州"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云"</span> <span class="attribute">tem1</span>=<span class="value">"9"</span> <span class="attribute">tem2</span>=<span class="value">"18"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"广西"</span> <span class="attribute">pyName</span>=<span class="value">"guangxi"</span> <span class="attribute">cityname</span>=<span class="value">"南宁"</span> <span class="attribute">state1</span>=<span class="value">"7"</span> <span class="attribute">state2</span>=<span class="value">"7"</span> <span class="attribute">stateDetailed</span>=<span class="value">"小雨"</span> <span class="attribute">tem1</span>=<span class="value">"5"</span> <span class="attribute">tem2</span>=<span class="value">"8"</span> <span class="attribute">windState</span>=<span class="value">"东风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"北京"</span> <span class="attribute">pyName</span>=<span class="value">"beijing"</span> <span class="attribute">cityname</span>=<span class="value">"北京"</span> <span class="attribute">state1</span>=<span class="value">"0"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"晴转多云"</span> <span class="attribute">tem1</span>=<span class="value">"-7"</span> <span class="attribute">tem2</span>=<span class="value">"2"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"天津"</span> <span class="attribute">pyName</span>=<span class="value">"tianjin"</span> <span class="attribute">cityname</span>=<span class="value">"天津"</span> <span class="attribute">state1</span>=<span class="value">"0"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"晴转多云"</span> <span class="attribute">tem1</span>=<span class="value">"-5"</span> <span class="attribute">tem2</span>=<span class="value">"5"</span> <span class="attribute">windState</span>=<span class="value">"西北风转西风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"上海"</span> <span class="attribute">pyName</span>=<span class="value">"shanghai"</span> <span class="attribute">cityname</span>=<span class="value">"上海"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"7"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴转小雨"</span> <span class="attribute">tem1</span>=<span class="value">"3"</span> <span class="attribute">tem2</span>=<span class="value">"7"</span> <span class="attribute">windState</span>=<span class="value">"微风转东北风小于3级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"重庆"</span> <span class="attribute">pyName</span>=<span class="value">"chongqing"</span> <span class="attribute">cityname</span>=<span class="value">"重庆"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴"</span> <span class="attribute">tem1</span>=<span class="value">"5"</span> <span class="attribute">tem2</span>=<span class="value">"8"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"香港"</span> <span class="attribute">pyName</span>=<span class="value">"xianggang"</span> <span class="attribute">cityname</span>=<span class="value">"香港"</span> <span class="attribute">state1</span>=<span class="value">"1"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"多云"</span> <span class="attribute">tem1</span>=<span class="value">"14"</span> <span class="attribute">tem2</span>=<span class="value">"17"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"澳门"</span> <span class="attribute">pyName</span>=<span class="value">"aomen"</span> <span class="attribute">cityname</span>=<span class="value">"澳门"</span> <span class="attribute">state1</span>=<span class="value">"2"</span> <span class="attribute">state2</span>=<span class="value">"1"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阴转多云"</span> <span class="attribute">tem1</span>=<span class="value">"12"</span> <span class="attribute">tem2</span>=<span class="value">"19"</span> <span class="attribute">windState</span>=<span class="value">"东北风3-4级转微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"台湾"</span> <span class="attribute">pyName</span>=<span class="value">"taiwan"</span> <span class="attribute">cityname</span>=<span class="value">"台北"</span> <span class="attribute">state1</span>=<span class="value">"7"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"小雨转阴"</span> <span class="attribute">tem1</span>=<span class="value">"11"</span> <span class="attribute">tem2</span>=<span class="value">"17"</span> <span class="attribute">windState</span>=<span class="value">"微风"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"西沙"</span> <span class="attribute">pyName</span>=<span class="value">"xisha"</span> <span class="attribute">cityname</span>=<span class="value">"西沙"</span> <span class="attribute">state1</span>=<span class="value">"3"</span> <span class="attribute">state2</span>=<span class="value">"3"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阵雨"</span> <span class="attribute">tem1</span>=<span class="value">"20"</span> <span class="attribute">tem2</span>=<span class="value">"25"</span> <span class="attribute">windState</span>=<span class="value">"东北风5-6级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"南沙"</span> <span class="attribute">pyName</span>=<span class="value">"nanshadao"</span> <span class="attribute">cityname</span>=<span class="value">"南沙"</span> <span class="attribute">state1</span>=<span class="value">"3"</span> <span class="attribute">state2</span>=<span class="value">"3"</span> <span class="attribute">stateDetailed</span>=<span class="value">"阵雨"</span> <span class="attribute">tem1</span>=<span class="value">"24"</span> <span class="attribute">tem2</span>=<span class="value">"27"</span> <span class="attribute">windState</span>=<span class="value">"东北风5-6级"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">city</span> <span class="attribute">quName</span>=<span class="value">"钓鱼岛"</span> <span class="attribute">pyName</span>=<span class="value">"diaoyudao"</span> <span class="attribute">cityname</span>=<span class="value">"钓鱼岛"</span> <span class="attribute">state1</span>=<span class="value">"7"</span> <span class="attribute">state2</span>=<span class="value">"2"</span> <span class="attribute">stateDetailed</span>=<span class="value">"小雨转阴"</span> <span class="attribute">tem1</span>=<span class="value">"13"</span> <span class="attribute">tem2</span>=<span class="value">"15"</span> <span class="attribute">windState</span>=<span class="value">"东北风5-6级转北风3-4级"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">china</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试接口的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">XMLRequest xmlRequest = <span class="keyword">new</span> XMLRequest(  </span><br><span class="line">        <span class="string">"http://flash.weather.com.cn/wmaps/xml/china.xml"</span>,  </span><br><span class="line">        <span class="keyword">new</span> Response.Listener&lt;XmlPullParser&gt;() &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(XmlPullParser response)</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    <span class="keyword">int</span> eventType = response.getEventType();  </span><br><span class="line">                    <span class="keyword">while</span> (eventType != XmlPullParser.END_DOCUMENT) &#123;  </span><br><span class="line">                        <span class="keyword">switch</span> (eventType) &#123;  </span><br><span class="line">                        <span class="keyword">case</span> XmlPullParser.START_TAG:  </span><br><span class="line">                            String nodeName = response.getName();  </span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">"city"</span>.equals(nodeName)) &#123;  </span><br><span class="line">                                String pName = response.getAttributeValue(<span class="number">0</span>);  </span><br><span class="line">                                Log.d(<span class="string">"TAG"</span>, <span class="string">"pName is "</span> + pName);  </span><br><span class="line">                            &#125;  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                        eventType = response.next();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;  </span><br><span class="line">                Log.e(<span class="string">"TAG"</span>, error.getMessage(), error);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">mQueue.add(xmlRequest);</span><br></pre></td></tr></table></figure></p>
<p>运行上述的测试例子，在Log栏中可以看到解析后的打印。具体信息如下：</p>
<p><img src="" alt=""></p>
<h2 id="总结：">总结：</h2><p>Volley是一个易于使用和扩展的网络加载库，通过这个例子，我们掌握了如何在Volley的基础上自定义我们的Request。当然你还可以根据自己的需求，来实现自定义的请求类型。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>谷歌官方提供的Volley包中，已经提供了多种Request，如StringRequest， JsonRequest，ImageRequest等。谷歌官方只提供了Json请求封装，用于请求一条JSON格式的数据。目前，网络上传输的数据通常有两种方式，JSON和XML。今天我们就来自定义自己的XML请求。<br>]]>
    
    </summary>
    
      <category term="Volley" scheme="http://science09.github.io/tags/Volley/"/>
    
      <category term="XMLRequest" scheme="http://science09.github.io/tags/XMLRequest/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java中的单例模式]]></title>
    <link href="http://science09.github.io/2015/01/31/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://science09.github.io/2015/01/31/Java单例模式/</id>
    <published>2015-01-31T08:09:06.000Z</published>
    <updated>2015-09-10T14:15:11.076Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是单例模式">什么是单例模式</h2><p>数学与逻辑学中，singleton定义为“有且仅有一个元素的集合”。单例模式最初的定义出现于《设计模式》（艾迪生维斯理, 1994）：“保证一个类仅有一个实例，并提供一个访问它的全局访问点。” Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”<br><a id="more"></a><br>单例模式是设计模式中最简单的形式之一。这一模式的目的是使得类的一个对象成为系统中的唯一实例。要实现这一点，可以从客户端对其进行实例化开始。因此需要用一种只允许生成对象类的唯一实例的机制，“阻止”所有想要生成对象的访问。使用工厂方法来限制实例化过程。这个方法应该是静态方法（类方法），因为让类的实例去生成另一个唯一实例毫无意义。</p>
<h2 id="案例">案例</h2><p>当一个类的实例可以有且只可以一个的时候就需要用到了。为什么只需要有一个呢？有人说是为了节约内存，但这只是单例模式带来的一个好处。只有一个实例确实减少内存占用，可是我认为这不是使用单例模式的理由。我认为使用单例模式的时机是当实例存在多个会引起程序逻辑错误的时候。比如类似有序的号码生成器这样的东西，怎么可以允许一个应用上存在多个呢？</p>
<p>Singleton模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。</p>
<ul>
<li>1 懒汉式实现(线程安全)：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonClass instance=<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonClass <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(SingletonClass.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonClass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法能够在多线程中很好的工作，而且看起来它也具备很好的lazy loading，但是，遗憾的是，效率很低，99%情况下不需要同步。</p>
<ul>
<li>2 饿汉式实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//在自己内部定义自己的一个实例，只供内部调用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里提供了一个供外部访问本class的静态方法，可以直接访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这种方式基于classloder机制避免了多线程的同步问题，不过，instance在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用getInstance方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance显然没有达到lazy loading的效果。</p>
<ul>
<li>3 双重锁实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>4 枚举实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，不过，个人认为由于1.5中才加入enum特性，用这种方式写不免让人感觉生疏，在实际工作中，我也很少看见有人这么写过。</p>
<ul>
<li>5 静态内部类实现：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式同样利用了classloder的机制来保证初始化instance时只有一个线程。</p>
<h2 id="单例模式的优缺点">单例模式的优缺点</h2><h4 id="优点">优点</h4><ul>
<li>一、实例控制</li>
</ul>
<p>单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例。</p>
<ul>
<li>二、灵活性</li>
</ul>
<p>因为类控制了实例化过程，所以类可以灵活更改实例化过程。</p>
<h4 id="缺点">缺点</h4><ul>
<li>一、开销</li>
</ul>
<p>虽然数量很少，但如果每次对象请求引用时都要检查是否存在类的实例，将仍然需要一些开销。可以通过使用静态初始化解决此问题。</p>
<ul>
<li>二、可能的开发混淆</li>
</ul>
<p>使用单例对象（尤其在类库中定义的对象）时，开发人员必须记住自己不能使用new关键字实例化对象。因为可能无法访问库源代码，因此应用程序开发人员可能会意外发现自己无法直接实例化此类。</p>
<ul>
<li>三、对象生存期</li>
</ul>
<p>不能解决删除单个对象的问题。在提供内存管理的语言中，只有单例类能够导致实例被取消分配，因为它包含对该实例的私有引用。在某些语言中（如 C++），其他类可以删除对象实例，但这样会导致单例类中出现悬浮引用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是单例模式">什么是单例模式</h2><p>数学与逻辑学中，singleton定义为“有且仅有一个元素的集合”。单例模式最初的定义出现于《设计模式》（艾迪生维斯理, 1994）：“保证一个类仅有一个实例，并提供一个访问它的全局访问点。” Java中单例模式定义：“一个类有且仅有一个实例，并且自行实例化向整个系统提供。”<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://science09.github.io/tags/java/"/>
    
      <category term="设计模式" scheme="http://science09.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 常用工具类库]]></title>
    <link href="http://science09.github.io/2015/01/06/Android-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%BA%93/"/>
    <id>http://science09.github.io/2015/01/06/Android-常用工具类库/</id>
    <published>2015-01-06T14:49:48.000Z</published>
    <updated>2015-09-10T13:19:56.984Z</updated>
    <content type="html"><![CDATA[<p>在Android开发中，经常用到的一些功能：</p>
<ol>
<li>下载，比如图片，文件。</li>
<li>将下载的文件进行解压。</li>
<li>请求服务器，比如说上传登陆信息，更新某些数据，又或者上传头像文件。<a id="more"></a></li>
<li>从文件系统中选择要操作的文件（图片，拍照，视频，拍摄视频）。</li>
<li>有时候也需要爬取某些网页数据。</li>
<li>存储一些配置信息</li>
<li>播放视频</li>
<li>再有一个特殊需求就是关乎Android程序UI设计，图标是个很麻烦的问题。每次都难以找到合适的Android 设计UI。</li>
</ol>
<h2 id="Android开发库Afinal">Android开发库Afinal</h2><p>afinal是一个很方便的工具库。<br><a href="https://github.com/yangfuhai/afinal" target="_blank" rel="external">GitHub</a><br><a href="http://www.zimeitix.com/" target="_blank" rel="external">作者博客</a> （注：国人项目哟）</p>
<ul>
<li>一行代码就可以对数据库进行增删改查。 </li>
<li>完全注解方式就可以进行UI绑定和事件绑定。无需findViewById和setClickListener等。</li>
<li>轻松实现Android上传文件，POST数据，下载文件（支持断点续传，随时停止下载任务 或者 开始任务）。</li>
<li>一行代码加载网络图片。</li>
</ul>
<h2 id="android-async-http">android-async-http</h2><p>Android下的异步HTTP库。<br><a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">GitHub</a><br><a href="http://loopj.com/android-async-http/" target="_blank" rel="external">文档</a>    PS：作者的GitHub值得关注。</p>
<ul>
<li>发送异步http请求，并且可在回调函数中处理返回响应Response。</li>
<li>http请求在thread线程，不会阻塞UI线程。</li>
<li>请求使用线程池（ThreadPool）实现，优化了并发的资源使用。</li>
<li>支持Multipart 文件上传。</li>
<li>如果Request请求失败，会自动请求。</li>
<li>支持Json解码。</li>
<li>支持存储Cookies到Preference中。</li>
<li>支持gzip处理Request以及Response。</li>
<li>整个库只有19KB。</li>
</ul>
<h2 id="http-requests">http-requests</h2><p>Java http请求库，设计的很优雅的一个库，推荐。<br><a href="https://github.com/kevinsawicki/http-request" target="_blank" rel="external">GitHub</a></p>
<h2 id="async-http-client">async-http-client</h2><p>Android下的异步 Http 和 WebSocket 库。<br><a href="https://github.com/AsyncHttpClient/async-http-client" target="_blank" rel="external">GitHub</a></p>
<ul>
<li>支持代理设置</li>
<li>支持分片儿处理请求返回内容</li>
<li>支持WebSocket</li>
</ul>
<h2 id="zt-zip:">zt-zip:</h2><p>压缩和解压库的库。<br><a href="https://github.com/zeroturnaround/zt-zip" target="_blank" rel="external">GitHub</a></p>
<ul>
<li>压缩和解压</li>
<li>单独操作文件压缩和解压。</li>
<li>替换zip文件中的某个文件</li>
</ul>
<h2 id="aFileChooser">aFileChooser</h2><p>文件选择器,用于选择需要操作的文件<br><a href="https://github.com/iPaulPro/aFileChooser" target="_blank" rel="external">GitHub</a></p>
<h2 id="image-chooser-library">image-chooser-library</h2><p>图片和视频的选择库。<br><a href="https://github.com/coomar2841/image-chooser-library" target="_blank" rel="external">GitHub</a><br><a href="https://play.google.com/store/apps/details?id=com.beanie.imagechooserapp" target="_blank" rel="external">Demo</a></p>
<h2 id="jsoup">jsoup</h2><p>HTML解析，并且能很好理解DOM，CSS，以及JQuery。<br><a href="https://github.com/jhy/jsoup" target="_blank" rel="external">GitHub</a><br><a href="http://jsoup.org/" target="_blank" rel="external">官方</a>   PS：这是java库。做网页爬虫（Crawler,Robot）必备。</p>
<h2 id="toml">toml</h2><p>这是个跨语言的配置信息存取方案。<br><a href="https://github.com/mojombo/toml" target="_blank" rel="external">GitHub</a></p>
<h2 id="Androiton-Action-Bar-Icons">Androiton-Action-Bar-Icons</h2><p>一个针对Android 优化过的ICON图标集。<br><a href="https://github.com/svenkapudija/Androton-Action-Bar-Icons" target="_blank" rel="external">GitHub</a><br><a href="https://a248.e.akamai.net/camo.github.com/13191b852f282fa929aad94cccc4d885c77e5d2a/687474703a2f2f692e696d6775722e636f6d2f576b654e496b522e706e67" target="_blank" rel="external">Demo</a></p>
<h2 id="ThinkAndroid">ThinkAndroid</h2><p>推荐一个Android整体框架：ThinkAndroid 集成了ioc，orm，下载，缓存等模块，能让开发更加快速和高效，同时还是国人项目。<br><a href="https://github.com/white-cat/ThinkAndroid" target="_blank" rel="external">GitHub</a></p>
<h2 id="OKHTTP">OKHTTP</h2><p>如果你想要更快的网络传输和加载速度可以试试OKHTTP，他实现了Google开发的SPDY协议，通过复用一个Socket，缩短网络加载时间。<br><a href="http://www.williamlong.info/archives/3119.html" target="_blank" rel="external">关于SPDY看这里</a><br><a href="http://square.github.io/okhttp/" target="_blank" rel="external">OKHTTP</a></p>
<h2 id="Android-ProgressFragment">Android-ProgressFragment</h2><p>等待数据的时候，支持显示等待符号的Fragment控件。<br><a href="https://github.com/johnkil/Android-ProgressFragment" target="_blank" rel="external">GitHub</a></p>
<h2 id="Vitamio">Vitamio</h2><p>关于播放视频，不要再去研究什么FFMPEG了，too slow，国人有个非常非常出色的开源项目叫Vitamio，让你播放视频简单如abc。<br><a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="external">GitHub</a><br><a href="http://www.vitamio.org/" target="_blank" rel="external">官方网站</a></p>
<h2 id="AndroidCommon">AndroidCommon</h2><p>Android常用的一些库和功能，如缓存，下拉列表，下载管理，静默安装等。感谢Trinea  <a href="https://github.com/Trinea/AndroidCommon" target="_blank" rel="external">GitHub</a></p>
<h2 id="ion">ion</h2><p>让Android的网络操作变得极其简单，支持异步获取和处理JSON，支持Android文件下载（同时支持下载进度条绑定），支持安全链接和代理。超级推荐！<br><a href="https://github.com/koush/ion" target="_blank" rel="external">GitHub</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android开发中，经常用到的一些功能：</p>
<ol>
<li>下载，比如图片，文件。</li>
<li>将下载的文件进行解压。</li>
<li>请求服务器，比如说上传登陆信息，更新某些数据，又或者上传头像文件。]]>
    
    </summary>
    
      <category term="Android库" scheme="http://science09.github.io/tags/Android%E5%BA%93/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android中的Parcelable接口浅谈]]></title>
    <link href="http://science09.github.io/2014/12/13/Android%E4%B8%AD%E7%9A%84Parcelable%E6%8E%A5%E5%8F%A3%E6%B5%85%E8%B0%88/"/>
    <id>http://science09.github.io/2014/12/13/Android中的Parcelable接口浅谈/</id>
    <published>2014-12-13T11:59:36.000Z</published>
    <updated>2015-09-10T13:29:32.291Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_什么是Parcelable接口">1. 什么是Parcelable接口</h2><p>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据。<br><a id="more"></a></p>
<h2 id="2-为什么要序列化">2.为什么要序列化</h2><ul>
<li>永久性保存对象，保存对象的字节序列到本地文件中；</li>
<li>通过序列化对象在网络中传递对象；</li>
<li>通过序列化在进程间传递对象；</li>
</ul>
<h2 id="3-实现序列化的方法">3.实现序列化的方法</h2><p>Android中实现序列化有两个选择：一是实现Serializable接口（是JavaSE本身就支持的），一是实现Parcelable接口（是Android特有功能，效率比实现Serializable接口高效，可用于Intent数据传递，也可以用于进程间通信（IPC））。实现Serializable接口非常简单，声明一下就可以了，而实现Parcelable接口稍微复杂一些，但效率更高，推荐用这种方法提高性能。</p>
<p>注：Android中Intent传递对象有两种方法：一是Bundle.putSerializable(Key，Object)，另一种是Bundle.putParcelable(Key，Object)。当然这些Object是有一定的条件的，前者是实现了Serializable接口，而后者是实现了Parcelable接口。</p>
<h2 id="4-选择序列化方法的原则">4.选择序列化方法的原则</h2><ul>
<li>在使用内存的时候，Parcelable比Serializable性能高，所以推荐使用Parcelable。</li>
<li>Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC。</li>
<li>Parcelable不能使用在要将数据存储在磁盘上的情况，因为Parcelable不能很好的保证数据的持续性在外界有变化的情况下。尽管Serializable效率低点，但此时还是建议使用Serializable 。</li>
</ul>
<h2 id="5-应用场景">5.应用场景</h2><p>需要在多个部件(Activity或Service)之间通过Intent传递一些数据，简单类型（如：数字、字符串）的可以直接放入Intent。复杂类型必须实现Parcelable接口。</p>
<h2 id="6-Parceable接口定义">6.Parceable接口定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parcelable</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//内容描述接口，基本不用管</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//写入接口函数，打包</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line">    <span class="comment">//读取接口，目的是要从Parcel中构造一个实现了Parcelable的类的实例处理。因为实现类在这里还是不可知的，所以需要用到模板的方式，继承类名通过模板参数传入</span></span><br><span class="line">    <span class="comment">//为了能够实现模板参数的传入，这里定义Creator嵌入接口,内含两个接口函数分别返回单个和多个继承类实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Creator</span>&lt;<span class="title">T</span>&gt; </span><br><span class="line">    </span>&#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> T <span class="title">createFromParcel</span><span class="params">(Parcel source)</span></span>;</span><br><span class="line">           <span class="keyword">public</span> T[] newArray(<span class="keyword">int</span> size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-实现Parcelable步骤">7.实现Parcelable步骤</h2><ol>
<li>implements Parcelable</li>
<li>重写writeToParcel方法，将你的对象序列化为一个Parcel对象，即：将类的数据写入外部提供的Parcel中，打包需要传递的数据到Parcel容器保存，以便从 Parcel容器获取数据</li>
<li>重写describeContents方法，内容接口描述，默认返回0就可以</li>
<li>实例化静态内部对象CREATOR实现接口Parcelable.Creator</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;T&gt; CREATOR</span><br></pre></td></tr></table></figure>
<p>注：其中public static final一个都不能少，内部对象CREATOR的名称也不能改变，必须全部大写。需重写本接口中的两个方法：createFromParcel(Parcel in) 实现从Parcel容器中读取传递数据值，封装成Parcelable对象返回逻辑层，newArray(int size) 创建一个类型为T，长度为size的数组，仅一句话即可（return new T[size]），供外部类反序列化本类数组使用。</p>
<p>简而言之：通过writeToParcel将你的对象映射成Parcel对象，再通过createFromParcel将Parcel对象映射成你的对象。也可以将Parcel看成是一个流，通过writeToParcel把对象写到流里面，在通过createFromParcel从流里读取对象，只不过这个过程需要你来实现，因此写的顺序和读的顺序必须一致。</p>
<p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Petrol</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String type;</span><br><span class="line">	<span class="keyword">private</span> String price;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> type;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.type = type;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> price;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(String price)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.price = price;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel arg0, <span class="keyword">int</span> arg1)</span> </span>&#123;</span><br><span class="line">		arg0.writeString(type);</span><br><span class="line">		arg0.writeString(price);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Petrol&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Petrol&gt;() &#123;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Petrol <span class="title">createFromParcel</span><span class="params">(Parcel arg0)</span> </span>&#123;</span><br><span class="line">			Petrol p = <span class="keyword">new</span> Petrol();</span><br><span class="line">			p.type = arg0.readString();</span><br><span class="line">			p.price = arg0.readString();</span><br><span class="line">			<span class="keyword">return</span> p;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="keyword">public</span> Petrol[] newArray(<span class="keyword">int</span> arg0) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="8、Serializable实现与Parcelabel实现的区别">8、Serializable实现与Parcelabel实现的区别</h2><ol>
<li>Serializable的实现，只需要implements  Serializable 即可。这只是给对象打了一个标记，系统会自动将其序列化。</li>
<li>Parcelabel的实现，不仅需要implements  Parcelabel，还需要在类中添加一个静态成员变量CREATOR，这个变量需要实现 Parcelable.Creator 接口。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_什么是Parcelable接口">1. 什么是Parcelable接口</h2><p>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://science09.github.io/tags/Android/"/>
    
      <category term="Parcelable" scheme="http://science09.github.io/tags/Parcelable/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用ionic框架构建Android APP ]]></title>
    <link href="http://science09.github.io/2014/10/29/%E4%BD%BF%E7%94%A8ionic%E6%A1%86%E6%9E%B6%E6%9E%84%E5%BB%BAAndroid-APP/"/>
    <id>http://science09.github.io/2014/10/29/使用ionic框架构建Android-APP/</id>
    <published>2014-10-29T14:46:43.000Z</published>
    <updated>2015-09-10T14:04:06.132Z</updated>
    <content type="html"><![CDATA[<h2 id="一、环境搭建">一、环境搭建</h2><ol>
<li>在安装ionic框架之前，需要先安装nodejs环境，具体可参考本博客之前的文章；</li>
<li>使用命令行安装最新版本的Cordova和Ionic <code>npm install -g cordova ionic</code></li>
<li>安装成功后，可以看到如下打印：</li>
</ol>
<a id="more"></a>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">le</span>&gt;<span class="title">npm</span> <span class="title">install</span> -<span class="title">g</span> <span class="title">cordova</span> <span class="title">ionic</span></span><br><span class="line"><span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">ionic</span> -&gt; <span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">node_modules</span>\<span class="title">ionic</span>\<span class="title">bin</span>\</span><br><span class="line"><span class="title">ionic</span></span><br><span class="line"><span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">cordova</span> -&gt; <span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">node_modules</span>\<span class="title">cordova</span>\</span><br><span class="line"><span class="title">bin</span>\<span class="title">cordova</span></span><br><span class="line"><span class="title">ionic</span>@1.2.8 <span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">node_modules</span>\<span class="title">ionic</span></span><br><span class="line">├── <span class="title">connect</span>-<span class="title">livereload</span>@0.4.0</span><br><span class="line">├── <span class="title">open</span>@0.0.5</span><br><span class="line">├── <span class="title">ncp</span>@0.4.2</span><br><span class="line">├── <span class="title">progress</span>@1.1.7</span><br><span class="line">├── <span class="title">colors</span>@0.6.2</span><br><span class="line">├── <span class="title">q</span>@1.0.1</span><br><span class="line">├── <span class="title">shelljs</span>@0.2.6</span><br><span class="line">├── <span class="title">cross</span>-<span class="title">spawn</span>@0.2.3 (<span class="title">lru</span>-<span class="title">cache</span>@2.5.0)</span><br><span class="line">├── <span class="title">optimist</span>@0.6.0 (<span class="title">wordwrap</span>@0.0.2, <span class="title">minimist</span>@0.0.10)</span><br><span class="line">├── <span class="title">event</span>-<span class="title">stream</span>@3.0.20 (<span class="title">split</span>@0.2.10, <span class="title">duplexer</span>@0.1.1, <span class="title">stream</span>-<span class="title">combiner</span>@0.0.4,</span><br><span class="line"> <span class="title">pause</span>-<span class="title">stream</span>@0.0.11, <span class="title">map</span>-<span class="title">stream</span>@0.0.4, <span class="title">from</span>@0.1.3, <span class="title">through</span>@2.3.6)</span><br><span class="line">├── <span class="title">finalhandler</span>@0.2.0 (<span class="title">escape</span>-<span class="title">html</span>@1.0.1, <span class="title">debug</span>@2.0.0)</span><br><span class="line">├── <span class="title">form</span>-<span class="title">data</span>@0.1.4 (<span class="title">mime</span>@1.2.11, <span class="title">async</span>@0.9.0, <span class="title">combined</span>-<span class="title">stream</span>@0.0.5)</span><br><span class="line">├── <span class="title">connect</span>@3.1.1 (<span class="title">utils</span>-<span class="title">merge</span>@1.0.0, <span class="title">parseurl</span>@1.3.0, <span class="title">finalhandler</span>@0.1.0, <span class="title">deb</span></span><br><span class="line"><span class="title">ug</span>@1.0.4)</span><br><span class="line">├── <span class="title">tiny</span>-<span class="title">lr</span>-<span class="title">fork</span>@0.0.5 (<span class="title">debug</span>@0.7.4, <span class="title">faye</span>-<span class="title">websocket</span>@0.4.4, <span class="title">qs</span>@0.5.6, <span class="title">noptify</span>@</span><br><span class="line">0.0.3)</span><br><span class="line">├── <span class="title">xml2js</span>@0.4.4 (<span class="title">sax</span>@0.6.1, <span class="title">xmlbuilder</span>@2.4.4)</span><br><span class="line">├── <span class="title">serve</span>-<span class="title">static</span>@1.6.1 (<span class="title">parseurl</span>@1.3.0, <span class="title">utils</span>-<span class="title">merge</span>@1.0.0, <span class="title">escape</span>-<span class="title">html</span>@1.0.1,</span><br><span class="line"> <span class="title">send</span>@0.9.1)</span><br><span class="line">├── <span class="title">request</span>@2.27.0 (<span class="title">aws</span>-<span class="title">sign</span>@0.3.0, <span class="title">cookie</span>-<span class="title">jar</span>@0.3.0, <span class="title">qs</span>@0.6.6, <span class="title">json</span>-<span class="title">stringif</span></span><br><span class="line"><span class="title">y</span>-<span class="title">safe</span>@5.0.0, <span class="title">oauth</span>-<span class="title">sign</span>@0.3.0, <span class="title">forever</span>-<span class="title">agent</span>@0.5.2, <span class="title">tunnel</span>-<span class="title">agent</span>@0.3.0, <span class="title">node</span>-<span class="title">uu</span></span><br><span class="line"><span class="title">id</span>@1.4.1, <span class="title">mime</span>@1.2.11, <span class="title">http</span>-<span class="title">signature</span>@0.10.0, <span class="title">hawk</span>@1.0.0)</span><br><span class="line">├── <span class="title">unzip</span>@0.1.9 (<span class="title">setimmediate</span>@1.0.2, <span class="title">pullstream</span>@0.4.1, <span class="title">match</span>-<span class="title">stream</span>@0.0.2, <span class="title">re</span></span><br><span class="line"><span class="title">adable</span>-<span class="title">stream</span>@1.0.33-1, <span class="title">fstream</span>@0.1.31, <span class="title">binary</span>@0.3.0)</span><br><span class="line">├── <span class="title">prompt</span>@0.2.12 (<span class="title">revalidator</span>@0.1.8, <span class="title">pkginfo</span>@0.3.0, <span class="title">read</span>@1.0.5, <span class="title">winston</span>@0.6.</span><br><span class="line">2, <span class="title">utile</span>@0.2.1)</span><br><span class="line">├── <span class="title">archiver</span>@0.5.1 (<span class="title">lodash</span>@2.4.1, <span class="title">lazystream</span>@0.1.0, <span class="title">readable</span>-<span class="title">stream</span>@1.1.13, <span class="title">z</span></span><br><span class="line"><span class="title">ip</span>-<span class="title">stream</span>@0.1.4, <span class="title">file</span>-<span class="title">utils</span>@0.1.5)</span><br><span class="line">├── <span class="title">vinyl</span>-<span class="title">fs</span>@0.3.7 (<span class="title">graceful</span>-<span class="title">fs</span>@3.0.4, <span class="title">lodash</span>@2.4.1, <span class="title">mkdirp</span>@0.5.0, <span class="title">strip</span>-<span class="title">bom</span>@</span><br><span class="line">1.0.0, <span class="title">vinyl</span>@0.4.3, <span class="title">through2</span>@0.6.3, <span class="title">glob</span>-<span class="title">stream</span>@3.1.15, <span class="title">glob</span>-<span class="title">watcher</span>@0.0.6)</span><br><span class="line">└── <span class="title">npm</span>@2.1.3</span><br><span class="line"></span><br><span class="line"><span class="title">cordova</span>@4.0.0 <span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">node_modules</span>\<span class="title">cordova</span></span><br><span class="line">├── <span class="title">q</span>@0.9.7</span><br><span class="line">├── <span class="title">underscore</span>@1.4.4</span><br><span class="line">├── <span class="title">nopt</span>@2.2.1 (<span class="title">abbrev</span>@1.0.5)</span><br><span class="line">└── <span class="title">cordova</span>-<span class="title">lib</span>@4.0.0 (<span class="title">osenv</span>@0.0.3, <span class="title">properties</span>-<span class="title">parser</span>@0.2.3, <span class="title">bplist</span>-<span class="title">parser</span>@0.</span><br><span class="line">0.5, <span class="title">mime</span>@1.2.11, <span class="title">unorm</span>@1.3.3, <span class="title">semver</span>@2.0.11, <span class="title">shelljs</span>@0.3.0, <span class="title">dep</span>-<span class="title">graph</span>@1.1.0, <span class="title">xc</span></span><br><span class="line"><span class="title">ode</span>@0.6.7, <span class="title">glob</span>@3.2.11, <span class="title">npmconf</span>@0.1.16, <span class="title">rc</span>@0.3.0, <span class="title">d8</span>@0.4.4, <span class="title">elementtree</span>@0.1.5, <span class="title">t</span></span><br><span class="line"><span class="title">ar</span>@0.1.20, <span class="title">request</span>@2.22.0, <span class="title">plist</span>@1.0.1, <span class="title">npm</span>@1.3.4, <span class="title">cordova</span>-<span class="title">js</span>@3.7.1)</span><br><span class="line"></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="二、开始构建APP">二、开始构建APP</h2><p>环境搭建成功后，我们就可以使用ionic的命令来构建AndroidApp的框架，在命令行中执行以下命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">D:\Users\myspace&gt;ionic start myApp tabs</span><br><span class="line">Creating Ionic app in folder D:\Users\myspace\myApp based on tabs project</span><br><span class="line"></span><br><span class="line">Downloading: https://github.com/driftyco/ionic-app-base/archive/master.zip</span><br><span class="line">[=============================]  100%  0.0s</span><br><span class="line"></span><br><span class="line">Downloading: https://github.com/driftyco/ionic-starter-tabs/archive/master.zip</span><br><span class="line">[=============================]  100%  0.0s</span><br><span class="line"></span><br><span class="line">Update config.xml</span><br><span class="line">Initializing cordova project</span><br><span class="line">Fetching plugin "org.apache.cordova.device" via plugin registry</span><br><span class="line">npm http GET http://registry.cordova.io/org.apache.cordova.device</span><br><span class="line">npm http 200 http://registry.cordova.io/org.apache.cordova.device</span><br><span class="line">npm http GET http://cordova.iriscouch.com/registry/_design/app/_rewrite/org.apac</span><br><span class="line">he.cordova.device/-/org.apache.cordova.device-0.2.12.tgz</span><br><span class="line">npm http 200 http://cordova.iriscouch.com/registry/_design/app/_rewrite/org.apac</span><br><span class="line">he.cordova.device/-/org.apache.cordova.device-0.2.12.tgz</span><br><span class="line">Fetching plugin "org.apache.cordova.console" via plugin registry</span><br><span class="line">npm http GET http://registry.cordova.io/org.apache.cordova.console</span><br><span class="line">npm http 200 http://registry.cordova.io/org.apache.cordova.console</span><br><span class="line">npm http GET http://cordova.iriscouch.com/registry/_design/app/_rewrite/org.apac</span><br><span class="line">he.cordova.console/-/org.apache.cordova.console-0.2.11.tgz</span><br><span class="line">npm http 200 http://cordova.iriscouch.com/registry/_design/app/_rewrite/org.apac</span><br><span class="line">he.cordova.console/-/org.apache.cordova.console-0.2.11.tgz</span><br><span class="line">Fetching plugin "com.ionic.keyboard" via plugin registry</span><br><span class="line">npm http GET http://registry.cordova.io/com.ionic.keyboard</span><br><span class="line">npm http 200 http://registry.cordova.io/com.ionic.keyboard</span><br><span class="line">npm http GET http://cordova.iriscouch.com/registry/_design/app/_rewrite/com.ioni</span><br><span class="line">c.keyboard/-/com.ionic.keyboard-1.0.3.tgz</span><br><span class="line">npm http 200 http://cordova.iriscouch.com/registry/_design/app/_rewrite/com.ioni</span><br><span class="line">c.keyboard/-/com.ionic.keyboard-1.0.3.tgz</span><br><span class="line"></span><br><span class="line">Your Ionic project is ready to go! Some quick tips:</span><br><span class="line"></span><br><span class="line"> * cd into your project: $ cd myApp</span><br><span class="line"></span><br><span class="line"> * Setup this project to use Sass: ionic setup sass</span><br><span class="line"></span><br><span class="line"> * Develop in the browser with live reload: ionic serve</span><br><span class="line"></span><br><span class="line"> * Add a platform (ios or Android): ionic platform add ios [android]</span><br><span class="line">   Note: iOS development requires OS X currently</span><br><span class="line">   See the Android Platform Guide for full Android installation instructions:</span><br><span class="line">   https://cordova.apache.org/docs/en/edge/guide_platforms_android_index.md.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Build your app: ionic build &lt;PLATFORM&gt;</span><br><span class="line"></span><br><span class="line"> * Simulate your app: ionic emulate &lt;PLATFORM&gt;</span><br><span class="line"></span><br><span class="line"> * Run your app on a device: ionic run &lt;PLATFORM&gt;</span><br><span class="line"></span><br><span class="line"> * Package an app using Ionic package service: ionic package &lt;MODE&gt; &lt;PLATFORM&gt;</span><br><span class="line"></span><br><span class="line">For more help use ionic --help or visit the Ionic docs: http://ionicframework.co</span><br><span class="line">m/docs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\Users\myspace&gt;</span><br></pre></td></tr></table></figure></p>
<p>命令执行成功后，会在当前目录下生产myApp的文件夹，打开myApp文件夹，ionic框架已经帮我们自动生成了Android App需要的基本框架。框架自动生成的文件如下：</p>
<p><img src="C:\Users\le\Pictures\ionic_framework.png" alt=""></p>
<p>该框架自动产生代码文件还不能直接在Android环境上运行，接着构建能在Android上运行的App，在命令行执行以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Users</span>\<span class="title">myspace</span>&gt;<span class="title">cd</span> <span class="title">myApp</span></span><br><span class="line"><span class="title">D</span>:\<span class="title">Users</span>\<span class="title">myspace</span>&gt;<span class="title">ionic</span> <span class="title">platform</span> <span class="title">add</span> <span class="title">android</span></span><br><span class="line"><span class="title">D</span>:\<span class="title">Users</span>\<span class="title">myspace</span>&gt;<span class="title">ionic</span> <span class="title">build</span> <span class="title">android</span></span><br><span class="line"><span class="title">D</span>:\<span class="title">Users</span>\<span class="title">myspace</span>&gt;<span class="title">ionic</span> <span class="title">emulate</span> <span class="title">android</span></span></span><br></pre></td></tr></table></figure>
<p>如果上面的每一步都构建成功的话，则可以看到ionic帮我们启动Android模拟器，并自动把该App安装到Android模拟器中，我们来看下执行后的效果：</p>
<p><img src="C:\Users\le\Pictures\myApp.png" alt=""></p>
<p>是不是很简单！ionic框架自动帮我们生产了App，接下来我们主要是关注自身的业务和逻辑，修改代码，使得该App能满足我们的需求。</p>
<p>三、构建自定义的APP</p>
<p>我们根据ionic提供的框架，来开发一个ToDoList的应用程序。使用Ionic提供的框架，创建一个空白的App，使用blank命令即可创建一个空白App；</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Users</span>\<span class="title">myspace</span>&gt;<span class="title">ionic</span> <span class="title">start</span> <span class="title">ToDoList</span> <span class="title">blank</span></span></span><br></pre></td></tr></table></figure>
<p>3.1) 创建一个ListItem，在www/index.html文件中的<ion-content> </ion-content> 中间加入一下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ion-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ion-item</span>&gt;</span>Scuba Diving<span class="tag">&lt;/<span class="title">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ion-item</span>&gt;</span>Climb Mount Everest<span class="tag">&lt;/<span class="title">ion-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ion-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在index.html文件中加入<code>ion-list</code>后，整个html文件的代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"lib/ionic/css/ionic.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">href</span>=<span class="value">"css/style.css"</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- IF using Sass (run gulp sass first), then uncomment below and remove the CSS includes above</span><br><span class="line">    &lt;link href="css/ionic.app.css" rel="stylesheet"&gt;</span><br><span class="line">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ionic/angularjs js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"lib/ionic/js/ionic.bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- cordova script (this will be a 404 during development) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"cordova.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- your app's js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-app</span>=<span class="value">"starter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">ion-pane</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">ion-header-bar</span> <span class="attribute">class</span>=<span class="value">"bar-stable"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span>Ionic Blank Starter<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ion-header-bar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">ion-content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ion-list</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">ion-item</span>&gt;</span>Scuba Diving<span class="tag">&lt;/<span class="title">ion-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">ion-item</span>&gt;</span>Climb Mount Everest<span class="tag">&lt;/<span class="title">ion-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ion-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">ion-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ion-pane</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="一、环境搭建">一、环境搭建</h2><ol>
<li>在安装ionic框架之前，需要先安装nodejs环境，具体可参考本博客之前的文章；</li>
<li>使用命令行安装最新版本的Cordova和Ionic <code>npm install -g cordova ionic</code></li>
<li>安装成功后，可以看到如下打印：</li>
</ol>]]>
    
    </summary>
    
      <category term="app" scheme="http://science09.github.io/tags/app/"/>
    
      <category term="ionic" scheme="http://science09.github.io/tags/ionic/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android之Intent数据传递]]></title>
    <link href="http://science09.github.io/2014/09/14/Android%E4%B9%8BIntent%E6%95%B0%E6%8D%AE/"/>
    <id>http://science09.github.io/2014/09/14/Android之Intent数据/</id>
    <published>2014-09-14T05:26:16.000Z</published>
    <updated>2015-09-10T13:26:51.778Z</updated>
    <content type="html"><![CDATA[<p>Intent（意图）主要是解决Android应用的各项组件之间的通讯。Intent负责对应用中一次操作的动作、动作涉及数据、附加数据进行描述，Android则根据此Intent的描述，负责找到对应的组件，将 Intent传递给调用的组件，并完成组件的调用。因此，Intent在这里起着一个媒体中介的作用，专门提供组件互相调用的相关信息，实现调用者与被调用者之间的解耦。<br><a id="more"></a><br>例如，在一个联系人维护的应用中，当我们在一个联系人列表屏幕(假设对应的Activity为listActivity)上，点击某个联系人后，希望能够跳出此联系人的详细信息屏幕(假设对应的Activity为detailActivity)</p>
<p>为了实现这个目的，listActivity需要构造一个 Intent，这个Intent用于告诉系统，我们要做“查看”动作，此动作对应的查看对象是“某联系人”，然后调用startActivity (Intent intent)，将构造的Intent传入，系统会根据此Intent中的描述，到ManiFest中找到满足此Intent要求的Activity，系统会调用找到的 Activity，即为detailActivity，最终传入Intent，detailActivity则会根据此Intent中的描述，执行相应的操作。</p>
<h2 id="Intent的使用">Intent的使用</h2><h4 id="1-_Activity的简单跳转">1. Activity的简单跳转</h4><p>Activity的切换一般是通过Intent来实现的，Intent是一个Activity到达另一个Activity的引路者，它描述了起点（当前Activity）和终点（目标Activity）。一个简单Intent实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();                           <span class="comment">//创建一个Intent对象</span></span><br><span class="line">intent.setClass(activityA.<span class="keyword">this</span>, activityB.class);    <span class="comment">//描述起点和目标</span></span><br><span class="line">startActivity(intent);                                       <span class="comment">//开始跳转</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2-包含数据传递的跳转">2.包含数据传递的跳转</h4><p>通常，我们在Activity的切换中，希望把前一个Activity的某些数据传递给下一个Activity。这时，我们可以借助Bundle来实现。Bundle，相当于数据存储包，用于存放我们想要转达的数据。打个比方，Intent就像一封邮件，里面有送信人地址（原始Activity），也有收信人地址（目标Activity），而Bundle就是附件也可看做是信件内容。下面是它的简单实现：</p>
<p> A、ActivityA发送：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setClass(activityA.<span class="keyword">this</span>, activityB.class);   <span class="comment">//描述起点和目标</span></span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();                           <span class="comment">//创建Bundle对象</span></span><br><span class="line">bundle.putString(<span class="string">"data"</span>, <span class="string">"ActivityA发来的数据"</span>);     <span class="comment">//装入数据</span></span><br><span class="line">intent.putExtras(bundle);                                <span class="comment">//把Bundle塞入Intent里面</span></span><br><span class="line">startActivity(intent);                                     <span class="comment">//开始切换</span></span><br></pre></td></tr></table></figure>
<p>B、ActivityB接受从ActivityA发来的数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">this</span>.getIntent();        <span class="comment">//获取已有的intent对象</span></span><br><span class="line">Bundle bundle = intent.getExtras();    <span class="comment">//获取intent里面的bundle对象</span></span><br><span class="line">string = bundle.getString(<span class="string">"data"</span>);    <span class="comment">//获取Bundle里面的字符串</span></span><br></pre></td></tr></table></figure>
<h4 id="3-_接受目标Activity返回的结果">3. 接受目标Activity返回的结果</h4><p>解决了如何传递数据问题，那么下一个问题是如何接受从目标Activity返回的处理结果。这里有两种方式，一是在onRestart方法（onRestrart表示重启Activity时激发的事件，具体看上一篇的生命周期）里面接受处理结果，方法实现和ActivityB接受从ActivityA发来的数据处理一样。另一种方式，是采用应答模式切换。这里，主要下第二种方式。应答模式切换和普通的切换不同在于，普通的是有去没回，应答则是有来有往。代码实现也不一样：</p>
<p>1、从ActivityA切换到ActivityB：startActivityForResult(intent,0);<br>2、从ActivityB返回到ActivityA：setResult(RESULT_OK, intent)；<br>3、接受返回结果：protected void onActivityResult()。<br>具体代码如下;</p>
<p>A、从ActivityA切换到ActivityB：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();    </span><br><span class="line">intent = intent.setClass(ActivityIntent.<span class="keyword">this</span>, AnotherActivity.class);</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();    </span><br><span class="line">bundle.putString(<span class="string">"string"</span>, et_string.getText().toString());</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">startActivityForResult(intent,<span class="number">0</span>);       <span class="comment">//只有这里不同 </span></span><br><span class="line"> <span class="comment">//ActivityIntent.this.finish();  //不能用finish，会触发onDestroy();</span></span><br></pre></td></tr></table></figure>
<p>B、从ActivityB返回到ActivityA：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent = intent.setClass(AnotherActivity.<span class="keyword">this</span>, ActivityIntent.class);</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putInt(<span class="string">"result"</span>, <span class="string">"ActivityB的处理结果"</span>);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">AnotherActivity.<span class="keyword">this</span>.setResult(RESULT_OK, intent);   <span class="comment">//RESULT_OK是返回状态码</span></span><br><span class="line">AnotherActivity.<span class="keyword">this</span>.finish(); <span class="comment">//会触发onDestroy();</span></span><br></pre></td></tr></table></figure>
<p>C、ActivityA接受ActivityB的返回结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">switch</span>(resultCode) &#123; <span class="comment">//根据状态码，处理返回结果</span></span><br><span class="line">        <span class="keyword">case</span> RESULT_OK:</span><br><span class="line">        Bundle bundle =data.getExtras();   <span class="comment">//获取intent里面的bundle对象</span></span><br><span class="line">        String result = bundle.getInt(<span class="string">"result"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-_Activity状态保留">4. Activity状态保留</h4><p>从ActivityB中返回到ActivityA（在ActivityA切换到ActivityB时，调用了finish方法），你会发现你在ActivityA以前的数据全没了，简单的说就是数据被没有保留下来。因为finish方法，会触发onDestroy()，使得ActivityA销毁。下一次再来到ActivityA时，是全新的ActivityA，以往的数据当然不在。如果想保留切换前的状态，可以采用两种方式：</p>
<p>1、切换时，不调用finish()方法。<br>2、采用SharedPreferences来保存数据。SharedPreferences 是一个轻量级存储类，主要用于保存一些窗体的状态，如文本框值、按钮状态等等，类似于Session。一般在onPause()方法里面保存数据，在onResume()里面提取数据。实现如下：</p>
<p>A、保存数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暂停：onStart()-&gt;onResume()-&gt;onPause()</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        Log.e(<span class="string">"Lifecycle_Activity1"</span>, <span class="string">"onPause()"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把数据保存到类似于Session之类的存储集合里面</span></span><br><span class="line">        SharedPreferences.Editor saveData = getPreferences(<span class="number">0</span>).edit();</span><br><span class="line">        saveData.putString(<span class="string">"value"</span>, et_string.getText().toString());</span><br><span class="line">        saveData.commit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>B、提取数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重启：onStart()-&gt;onResume()</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        Log.e(<span class="string">"Lifecycle_Activity1"</span>, <span class="string">"onResume()"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从共享数据存储对象中获取所需的数据 </span></span><br><span class="line">        SharedPreferences getData = getPreferences(<span class="number">0</span>);</span><br><span class="line">        String value = getData.getString(<span class="string">"value"</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span>(value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            et_string.setText(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Intent（意图）主要是解决Android应用的各项组件之间的通讯。Intent负责对应用中一次操作的动作、动作涉及数据、附加数据进行描述，Android则根据此Intent的描述，负责找到对应的组件，将 Intent传递给调用的组件，并完成组件的调用。因此，Intent在这里起着一个媒体中介的作用，专门提供组件互相调用的相关信息，实现调用者与被调用者之间的解耦。<br>]]>
    
    </summary>
    
      <category term="Android" scheme="http://science09.github.io/tags/Android/"/>
    
      <category term="Intent" scheme="http://science09.github.io/tags/Intent/"/>
    
      <category term="Android" scheme="http://science09.github.io/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown——入门指南]]></title>
    <link href="http://science09.github.io/2014/09/10/Markdown%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://science09.github.io/2014/09/10/Markdown入门指南/</id>
    <published>2014-09-10T12:33:36.000Z</published>
    <updated>2015-09-10T13:46:28.690Z</updated>
    <content type="html"><![CDATA[<h2 id="导语：">导语：</h2><blockquote>
<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。<br><a id="more"></a></p>
</blockquote>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effia3l1xoj214z0n8dkl.jpg" alt=""></p>
<h2 id="一、_认识Markdown">一、 认识Markdown</h2><p>在刚才的导语里提到，Markdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。目前来看，支持Markdown 语法的编辑器有很多，包括很多网站（例如简书）也支持了Markdown 的文字录入。Markdown 从写作到完成，导出格式随心所欲，你可以导出HTML格式的文件用来网站发布，也可以十分方便的导出PDF格式，这种格式写出的简历更能得到HR的好感。甚至可以利用<a href="http://www.getcloudapp.com/" target="_blank" rel="external">CloudApp</a>这种云服务工具直接上传至网页用来分享你的文章，全球最大的轻博客平台<a href="http://te1ee.tumblr.com/" target="_blank" rel="external">Tumblr</a>，也支持Mou这类Markdown 工具的直接上传。</p>
<h2 id="Markdown官方文档">Markdown官方文档</h2><ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">创始人John Gruber的Markdown语法说明</a></li>
<li><a href="http://wowubuntu.com/markdown/#list" target="_blank" rel="external">Markdown中文版语法说明</a></li>
</ul>
<h2 id="使用Markdown的优点">使用Markdown的优点</h2><ul>
<li>专注你的文字内容而不是排版样式。</li>
<li>轻松的导出HTML、PDF和本身的.md文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>可读，直观。适合所有人的写作语言。</li>
</ul>
<h2 id="Markdown编辑器">Markdown编辑器</h2><ul>
<li>在Mac OS X上，我强烈建议你用Mou这款免费且十分好用的Markdown编辑器，它支持实时预览，既左边是你编辑Markdown语言，右边会实时的生成预览效果，笔者文章就是Mou这款软件写出来的。</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/6aee7dbbgw1effcq2gx92j210j0ustj7.jpg" alt=""></p>
<p>其次还有很多，如果你是个编辑作者，我强烈建议你购买 Ulysses Ⅲ，这款软件入围了苹果去年Mac App Store的The Best of 2013。它支持更多的写作格式、多文档的支持。Mou，iA writer这些软件都是基于单文档的管理方式，而Ulysses Ⅲ支持Folder、Filter的管理，一个Folder里面可以创建多个Sheet，Sheet之间也可以进行Combine处理。</p>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effd31zsw9j20o604iaae.jpg" alt=""></p>
<ul>
<li>由于笔者不用Windows，Windows下的Markdown工具没有用过，经朋友介绍，有两款还算不错，一款叫<a href="http://www.markdownpad.com/" target="_blank" rel="external">MarkdownPad</a> ，另一款叫<a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="external">MarkPad</a></li>
</ul>
<ul>
<li>iOS端很多app早已经支持了Markdown录入，例如Drafts，Day One，iA writer等。</li>
</ul>
<ul>
<li>在Web端，我强烈推荐<a href="http://jianshu.io/" target="_blank" rel="external">简书</a>这款产品，上面有无数热爱文字的人在不停的创造，分享。在Web端使用Markdown没有比简书更舒服的地方了，同样支持左右两栏的实时预览，字体优雅，简洁。</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1effdkfijo1j21220nigth.jpg" alt=""></p>
<ul>
<li>同样是Web端，<a href="https://draftin.com/" target="_blank" rel="external">Draftin</a> 也近乎完美。</li>
</ul>
<h2 id="二、Markdown语法的简要规则">二、Markdown语法的简要规则</h2><p><strong>标题</strong><br><img src="http://ww1.sinaimg.cn/large/6aee7dbbgw1effeaclhiyj20eh09cwez.jpg" alt=""></p>
<p>标题是每篇文章都需要也是最常用的格式，在Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 <code>#</code> 号即可。</p>
<p><code># 一级标题</code></p>
<p><code>## 二级标题</code></p>
<p><code>### 三级标题</code></p>
<p>以此类推，总共六级标题，建议在井号后加一个空格，这是最标准的Markdown语法。</p>
<p><strong>列表</strong></p>
<p>熟悉HTML的同学肯定知道有序列表与无序列表的区别，在Markdown 下，列表的显示只需要在文字前加上 <code>-</code> 或 <code>*</code> 即可变为无序列表，有序列表则直接在文字前加<code>1.</code> <code>2.</code> <code>3.</code> 符号要和文字之间加上一个字符的空格。</p>
<p><img src="http://ww4.sinaimg.cn/large/6aee7dbbgw1effew5aftij20d80bz3yw.jpg" alt=""></p>
<p><strong>引用</strong></p>
<p>如果你需要引用一小段别处的句子，那么就要用引用的格式。</p>
<p>&gt;</p>
<blockquote>
<p>例如这样</p>
</blockquote>
<p>只需要在文本前加入 <code>&gt;</code> 这种尖括号（大于号）即可</p>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effezhonxlj20e009c3yu.jpg" alt=""></p>
<p><strong>图片与链接</strong></p>
<p>插入链接与插入图片的语法很像，区别在一个 !号</p>
<p>图片为：<code>![]()</code></p>
<p>链接为：<code>[]()</code></p>
<p>插入图片的地址需要图床，这里推荐<a href="http://www.getcloudapp.com/" target="_blank" rel="external">CloudApp</a>的服务，生成URL地址即可。</p>
<p><img src="http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg" alt=""></p>
<p><strong>粗体与斜体</strong></p>
<p>Markdown 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法。</p>
<p>例如：这里是粗体 <em>这里是斜体</em></p>
<p><strong>表格</strong></p>
<p>表格是我觉得Markdown比较累人的地方，例子如下：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| :-----|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure>
<p>这种语法生成的表格如下：</p>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:left">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:left">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:left">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:left">$1</td>
</tr>
</tbody>
</table>
<p><strong>代码框</strong></p>
<p>如果你是个程序猿，需要在文章里优雅的引用代码框，在Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。图例：</p>
<p>如果你是个程序猿，需要在文章里优雅的引用代码框，在Markdown下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来。图例：</p>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effg1lsa97j20lt0a8dgs.jpg" alt=""></p>
<p>使用 <code>tab</code> 键即可缩进。</p>
<p><strong>分割线</strong></p>
<p>分割线的语法只需要三个 <code>*</code> 号，例如：</p>
<blockquote>
<p>到这里，Markdown 的基本语法在日常的使用中基本就没什么大问题了，只要多加练习，配合好用的工具，写起东西来肯定会行云流水。更多的语法规则，其实Mou的Help文档栗子很好，当你第一次使用Mou时，就会显示该文档。可以用来对用的查找和学习。</p>
</blockquote>
<p><img src="http://ww3.sinaimg.cn/large/6aee7dbbgw1effgmnpgqlj210j0us44j.jpg" alt=""></p>
<h2 id="三，相关推荐:">三，相关推荐:</h2><p><strong>工具</strong></p>
<p>图床工具用来上传图片获取URL地址</p>
<ul>
<li><a href="http://droplr.com/" target="_blank" rel="external">Droplr</a></li>
<li><a href="http://www.getcloudapp.com/" target="_blank" rel="external">Cloudapp</a></li>
<li><a href="https://itunes.apple.com/cn/app/yi-xiang/id672522335?mt=12&amp;uo=4" target="_blank" rel="external">ezShare for Mac</a></li>
<li><a href="http://weibotuchuang.sinaapp.com/" target="_blank" rel="external">围脖图床修复计划</a></li>
</ul>
<p>在线好用的Markdown工具，为印象笔记而生</p>
<ul>
<li><a href="http://maxiang.info/" target="_blank" rel="external">马克飞象，专为印象笔记打造的Markdown编辑器，非常推荐</a></li>
</ul>
<p>原文链接: <a href="http://jianshu.io/p/1e402922ee32" target="_blank" rel="external">http://jianshu.io/p/1e402922ee32</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="导语：">导语：</h2><blockquote>
<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。<br>]]>
    
    </summary>
    
      <category term="Markdown" scheme="http://science09.github.io/tags/Markdown/"/>
    
      <category term="WEB" scheme="http://science09.github.io/categories/WEB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Node.js，Express，MongoDB创建REST API]]></title>
    <link href="http://science09.github.io/2014/09/03/%E4%BD%BF%E7%94%A8Node-js%EF%BC%8CExpress%EF%BC%8CMongoDB%E5%88%9B%E5%BB%BAREST-API/"/>
    <id>http://science09.github.io/2014/09/03/使用Node-js，Express，MongoDB创建REST-API/</id>
    <published>2014-09-03T13:34:37.000Z</published>
    <updated>2015-09-10T14:05:51.750Z</updated>
    <content type="html"><![CDATA[<p><img src="C:\Users\le\Downloads\nodemango1.jpg" alt="nodeMongo"><br><a id="more"></a><br>本文介绍如何使用Node.js，Express，MongoDB快速的创建REST ful API。</p>
<h4 id="安装Node-js">安装Node.js</h4><p>到Node的官方网站<a href="http://nodejs.org" target="_blank" rel="external">http://nodejs.org</a>下载并安装；Windows上Node的安装可参考这篇文章: <a href="http://www.byte.tk/under-windows-platform-development-environment-to-build-node-js/" target="_blank" rel="external">Windows平台下Node.js开发环境搭建</a></p>
<p>Nodejs安装完毕后，接下来创建一个WEB服务器。我们将使用Nodejs作为我们项目的一个出发点：通过REST ful API访问数据（retrieve, create, update, delete）wine数据库。</p>
<ol>
<li>创建一个 winecell的文件夹；</li>
<li>在winecell文件夹内创建一个server.js的文件；</li>
<li>在server.js文件敲入以下代码；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">	res.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>, <span class="string">'127.0.0.1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:3000/'</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>我们现在准备启动服务器并测试该应用程序，</p>
<ol>
<li>打开一个shell，切换到winecell的目录下，执行 node server.js 启动服务器；</li>
<li>测试该Http服务器是否正常，打开浏览器访问 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 。</li>
</ol>
<h4 id="安装Express">安装Express</h4><p>Express是一个轻型的node.js web应用程序框架。他提供了基本的Http操作，可以很容易的创建REST接口。</p>
<p>在winecell应用程序中安装Express</p>
<ol>
<li><p>在winecell文件夹中，创建一个package.json的文件，文件内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">"name"</span>: <span class="string">"wine-cellar"</span>,</span><br><span class="line">	<span class="string">"description"</span>: <span class="string">"Wine Cellar Application"</span>,</span><br><span class="line">	<span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">	<span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="string">"dependencies"</span>: &#123;</span><br><span class="line">	<span class="string">"express"</span>: <span class="string">"3.x"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>目录切换到 winecell中，执行以下命令来安装express模块。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>安装过程打印信息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">D:\Project\JavaScript\winecell&gt;npm install express</span><br><span class="line">express@<span class="number">3.16</span><span class="number">.5</span> node_modules\express</span><br><span class="line">├── basic-auth@<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">├── range-parser@<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">├── merge-descriptors@<span class="number">0.0</span><span class="number">.2</span></span><br><span class="line">├── cookie@<span class="number">0.1</span><span class="number">.2</span></span><br><span class="line">├── fresh@<span class="number">0.2</span><span class="number">.2</span></span><br><span class="line">├── media-typer@<span class="number">0.2</span><span class="number">.0</span></span><br><span class="line">├── <span class="built_in">escape</span>-html@<span class="number">1.0</span><span class="number">.1</span></span><br><span class="line">├── cookie-signature@<span class="number">1.0</span><span class="number">.4</span></span><br><span class="line">├── vary@<span class="number">0.1</span><span class="number">.0</span></span><br><span class="line">├── parseurl@<span class="number">1.3</span><span class="number">.0</span></span><br><span class="line">├── methods@<span class="number">1.1</span><span class="number">.0</span></span><br><span class="line">├── buffer-crc32@<span class="number">0.2</span><span class="number">.3</span></span><br><span class="line">├── depd@<span class="number">0.4</span><span class="number">.4</span></span><br><span class="line">├── debug@<span class="number">1.0</span><span class="number">.4</span> (ms@<span class="number">0.6</span><span class="number">.2</span>)</span><br><span class="line">├── commander@<span class="number">1.3</span><span class="number">.2</span> (keypress@<span class="number">0.1</span><span class="number">.0</span>)</span><br><span class="line">├── proxy-addr@<span class="number">1.0</span><span class="number">.1</span> (ipaddr.js@<span class="number">0.1</span><span class="number">.2</span>)</span><br><span class="line">├── mkdirp@<span class="number">0.5</span><span class="number">.0</span> (minimist@<span class="number">0.0</span><span class="number">.8</span>)</span><br><span class="line">├── send@<span class="number">0.8</span><span class="number">.1</span> (ms@<span class="number">0.6</span><span class="number">.2</span>, mime@<span class="number">1.2</span><span class="number">.11</span>, finished@<span class="number">1.2</span><span class="number">.2</span>)</span><br><span class="line">└── connect@<span class="number">2.25</span><span class="number">.5</span> (finalhandler@<span class="number">0.1</span><span class="number">.0</span>, bytes@<span class="number">1.0</span><span class="number">.0</span>, pause@<span class="number">0.0</span><span class="number">.1</span>, response-ti</span><br><span class="line">me@<span class="number">2.0</span><span class="number">.1</span>, serve-favicon@<span class="number">2.0</span><span class="number">.1</span>, on-headers@<span class="number">1.0</span><span class="number">.0</span>, basic-auth-connect@<span class="number">1.0</span><span class="number">.0</span>, vhost</span><br><span class="line">@<span class="number">2.0</span><span class="number">.0</span>, cookie-parser@<span class="number">1.3</span><span class="number">.2</span>, connect-timeout@<span class="number">1.2</span><span class="number">.2</span>, qs@<span class="number">1.2</span><span class="number">.1</span>, morgan@<span class="number">1.2</span><span class="number">.2</span>, serv</span><br><span class="line">e-static@<span class="number">1.5</span><span class="number">.1</span>, type-is@<span class="number">1.3</span><span class="number">.2</span>, method-override@<span class="number">2.1</span><span class="number">.3</span>, errorhandler@<span class="number">1.1</span><span class="number">.1</span>, compre</span><br><span class="line">ssion@<span class="number">1.0</span><span class="number">.11</span>, body-parser@<span class="number">1.6</span><span class="number">.3</span>, serve-index@<span class="number">1.1</span><span class="number">.6</span>, multiparty@<span class="number">3.3</span><span class="number">.2</span>, express-se</span><br><span class="line">ssion@<span class="number">1.7</span><span class="number">.5</span>, csurf@<span class="number">1.4</span><span class="number">.0</span>)</span><br></pre></td></tr></table></figure></p>
<p>执行上述命令后，在winecell文件夹下回创建一个node_modules的文件夹，express就安装在node_modules的子文件夹下。</p>
<p>Express安装完毕后，我们可以为winecell应用程序构建一个基本的REST 接口。</p>
<ol>
<li><p>打开server.js文件，使用以下内容替换掉原来文本中的内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/wines'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	res.send([&#123;name:<span class="string">'wine1'</span>&#125;, &#123;name:<span class="string">'wine2'</span>&#125;]);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/wines/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	res.send(&#123;id:req.params.id, name: <span class="string">"The Name"</span>, description: <span class="string">"description"</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Listening on port 3000...'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 CTRL+C 停止之前的服务并重启应用服务器： node server.js</p>
</li>
<li>测试API，打开浏览器访问以下URLs：</li>
</ol>
<table>
<thead>
<tr>
<th>获取所有wines的数据</th>
<th><a href="http://localhost:3000/wines" target="_blank" rel="external">http://localhost:3000/wines</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>获取指定id的wine</td>
<td><a href="http://localhost:3000/wines/1" target="_blank" rel="external">http://localhost:3000/wines/1</a></td>
</tr>
</tbody>
</table>
<h4 id="使用Node-js模块">使用Node.js模块</h4><p>在大型应用程序开发中，一般采用模块化的方式来进行项目的开发。我们尝试把wine相关的内容移动到wines模块，再在server.js中使用该模块。</p>
<ol>
<li>在winecell文件夹下创建routes的子文件夹。</li>
<li><p>在routes文件夹下，创建一个wines.js的文件并敲入以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exports.findAll = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	res.send([&#123;name:<span class="string">'wine1'</span>&#125;, &#123;name:<span class="string">'wine2'</span>&#125;, &#123;name:<span class="string">'wine3'</span>&#125;]);</span><br><span class="line">&#125;;</span><br><span class="line">exports.findById = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	res.send(&#123;id:req.params.id, name: <span class="string">"The Name"</span>, description: <span class="string">"description"</span>&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改server.js文件，使用wines.js模块重新实现，修改后的内容如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> wines = <span class="built_in">require</span>(<span class="string">'./routes/wines'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">'/wines'</span>, wines.findAll);</span><br><span class="line">app.get(<span class="string">'/wines/:id'</span>, wines.findById);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Listening on port 3000...'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务器并测试该API：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>获取所有wines的数据</th>
<th><a href="http://localhost:3000/wines" target="_blank" rel="external">http://localhost:3000/wines</a></th>
</tr>
</thead>
<tbody>
<tr>
<td>获取指定id的wine</td>
<td><a href="http://localhost:3000/wines/1" target="_blank" rel="external">http://localhost:3000/wines/1</a></td>
</tr>
</tbody>
</table>
<p>下一步是从MongoDB数据库的实际数据替换在wines.js中写死的数据。</p>
<h4 id="安装MongoDB">安装MongoDB</h4><p> 各个平台上MongoDB的安装可参考 <a href="http://docs.mongodb.org/manual/installation/" target="_blank" rel="external">MongoDB QuickStart</a><br>Win7上安装MongoDB的方法：</p>
<ol>
<li>到<a href="http://www.mongodb.org/downloads" target="_blank" rel="external">MongoDB官网</a>下载适合自己平台的安装版本，我这里下载的是win7 32bit的版本，msi安装格式，直接下载单击安装即可。在向导页面中选择的是典型安装，当然你可以根据自己的需求，可选择自定义安装或者全部安装。</li>
<li>安装结束后默认是放在C盘目录下，我把它拷贝到D盘目录下，放到 D:\Program Files\MongoDB 的目录下。</li>
<li>在 D:\Program Files\MongoDB 目录下创建data文件夹，并在data文件夹下创建 db 和 log 的子文件夹。</li>
<li><p>创建配置文件，该配置文件可以包含MongoDB的各种配置选项。这里，我们只配置数据库路径以及log文件路径。操作方法：在命令行中敲入以下命令（需要管理员权限）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\MongoDB\bin&gt;<span class="built_in">echo</span> logpath=<span class="string">"D:\Program Files\MongoDB\data\log\MongoDB.log"</span>&gt; <span class="string">"D:\Program Files\MongoDB\mongod.cfg"</span></span><br><span class="line">D:\Program Files\MongoDB\bin&gt;<span class="built_in">echo</span> dbpath=<span class="string">"D:\Program Files\MongoDB\data\db"</span>&gt;&gt; <span class="string">"D:\Program Files\MongoDB\mongod.cfg"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建MongoDB作为系统服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\MongoDB\bin&gt;sc.exe create MongoDB binPath= <span class="string">"\"D:\Program Files\</span><br><span class="line">MongoDB\bin\mongod.exe\" --service --config=\"D:\Program Files\MongoDB\mongod.cf</span><br><span class="line">g\""</span> DisplayName= <span class="string">"MongoDB 2.6 Standard"</span> start= <span class="string">"auto"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果成功创建，则在CMD中会如下打印：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SC] CreateService SUCCESS</span><br></pre></td></tr></table></figure></p>
<ol>
<li>启动MongoDB服务<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="winutils">net</span> <span class="built_in">start</span> MongoDB</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>在我的环境上MongoDB服务未能正常启动，出现了如下问题：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">MongoDB</span>\<span class="title">bin</span>&gt;<span class="title">net</span> <span class="title">start</span> <span class="title">MongoDB</span></span><br><span class="line">服务没有响应控制功能。</span><br><span class="line">请键入 <span class="title">NET</span> <span class="title">HELPMSG</span> 2186 以获得更多的帮助。</span></span><br></pre></td></tr></table></figure></p>
<p>MongoDB服务不能启动的解决方法：</p>
<ol>
<li><p>先将MongoDB服务删除：</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">MongoDB</span>\<span class="title">bin</span>&gt;<span class="title">sc.exe</span> <span class="title">delete</span> <span class="title">MongoDB</span></span><br><span class="line">[<span class="title">SC</span>] <span class="title">DeleteService</span> 成功</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按照下面的方法从新配置数据库路径以及log路径，服务正常启动；</p>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">MongoDB</span>\<span class="title">bin</span>&gt;<span class="title">mongod</span> --<span class="title">dbpath</span> "<span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">MongoDB</span>\<span class="title">data</span>" --<span class="title">l</span></span><br><span class="line"><span class="title">ogpath</span> "<span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">MongoDB</span>\<span class="title">data</span>\<span class="title">log</span>\<span class="title">MongoDB.log</span>" --<span class="title">logappend</span> --<span class="title">serviceName</span></span><br><span class="line"> <span class="title">MongoDB</span> --<span class="title">auth</span> --<span class="title">install</span></span><br><span class="line">2014-08-16<span class="title">T22</span>:48:06.257+0800</span><br><span class="line">2014-08-16<span class="title">T22</span>:48:06.260+0800 <span class="title">warning</span>: 32-<span class="title">bit</span> <span class="title">servers</span> <span class="title">don</span>'<span class="title">t</span> <span class="title">have</span> <span class="title">journaling</span> <span class="title">enabl</span></span><br><span class="line"><span class="title">ed</span> <span class="title">by</span> <span class="title">default</span>. <span class="title">Please</span> <span class="title">use</span> --<span class="title">journal</span> <span class="title">if</span> <span class="title">you</span> <span class="title">want</span> <span class="title">durability</span>.</span><br><span class="line">2014-08-16<span class="title">T22</span>:48:06.260+0800</span><br><span class="line"><span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">MongoDB</span>\<span class="title">bin</span>&gt;<span class="title">net</span> <span class="title">start</span> <span class="title">MongoDB</span></span><br><span class="line"><span class="title">MongoDB</span> 服务正在启动 .</span><br><span class="line"><span class="title">MongoDB</span> 服务已经启动成功。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要停止MongoDB服务，可使用： net stop MongoDB</p>
</li>
</ol>
<p>注： 官方的安装说明可参考这里： <a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="external">http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/</a></p>
<h4 id="安装Node-js的MongoDB驱动">安装Node.js的MongoDB驱动</h4><p>Node.js有不同的解决方案提供了不同层次的抽象来访问MongoDB数据库。例如 <a href="http://mongoosejs.com/" target="_blank" rel="external">Mongoose</a> 和 <a href="https://github.com/masylum/mongolia" target="_blank" rel="external">Mongolia</a> 。本文不会讨论两种解决方案的比较。我们即将讨论的是 <a href="http://docs.mongodb.org/ecosystem/drivers/node-js/" target="_blank" rel="external">native Node.js driver</a>。</p>
<p>通过命令行来安装Nodejs的本地MongoDB驱动：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g mongodb</span><br></pre></td></tr></table></figure></p>
<h4 id="实现REST_API">实现REST API</h4><p>winecell应用程序的全部REST API包含如下方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>URL</th>
<th>动作</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/wines</td>
<td>Retrieve all wines</td>
</tr>
<tr>
<td>GET</td>
<td>/wines/5069b47aa892630aae000001</td>
<td>Retrieve the wine with the specified _id</td>
</tr>
<tr>
<td>POST</td>
<td>/wines</td>
<td>Add a new wine</td>
</tr>
<tr>
<td>PUT</td>
<td>/wines/5069b47aa892630aae000001</td>
<td>Update wine with the specified _id</td>
</tr>
<tr>
<td>DELETE</td>
<td>/wines/5069b47aa892630aae000001</td>
<td>Delete the wine with the specified _id</td>
</tr>
</tbody>
</table>
<p>API的需求需要实现上述几种路由操作，修改server.js文件，具体如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> wines = <span class="built_in">require</span>(<span class="string">'./routes/wines'</span>)</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.configure(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	app.use(express.logger(<span class="string">'dev'</span>));</span><br><span class="line">	app.use(express.bodyParser());</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/wines'</span>, wines.findAll);</span><br><span class="line">app.get(<span class="string">'/wines/:id'</span>, wines.findById);</span><br><span class="line">app.post(<span class="string">'/wines'</span>, wines.addWine);</span><br><span class="line">app.put(<span class="string">'/wines/:id'</span>, wines.updateWine);</span><br><span class="line">app.delete(<span class="string">'/wines/:id'</span>, wines.deleteWine);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Listening on port 3000...'</span>);</span><br></pre></td></tr></table></figure></p>
<p>为每个路由操作提供数据访问逻辑，修改wines.js文件，具体如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongo =<span class="built_in">require</span>(<span class="string">'mongodb'</span>);</span><br><span class="line"><span class="keyword">var</span> Server = mongo.Server,</span><br><span class="line">	Db = mongo.Db,</span><br><span class="line">	BSON = mongo.BSONPure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> Server(<span class="string">'localhost'</span>, <span class="number">27107</span>, &#123;auto_reconnect: <span class="literal">true</span>&#125;);</span><br><span class="line">db = <span class="keyword">new</span> Db(<span class="string">'winedb'</span>, server);</span><br><span class="line"></span><br><span class="line">db.open(<span class="function"><span class="keyword">function</span>(<span class="params">err, db</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!err)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"Connected to 'winedb' database"</span>);</span><br><span class="line">		db.collection(<span class="string">'wines'</span>, &#123;strict:<span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">"The 'wines' collection doesn't exist. Creating it  Creating it with sample data..."</span>);</span><br><span class="line">				populateDB();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">exports.findAll = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	db.collection(<span class="string">'wines'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>)</span>&#123;</span><br><span class="line">		collection.find().toArray(<span class="function"><span class="keyword">function</span>(<span class="params">err, items</span>)</span>&#123;</span><br><span class="line">			res.send(items);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">exports.findById = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> id = req.params.id;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Retrieving wine:'</span> + id);</span><br><span class="line">	db.collection(<span class="string">'wines'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>)</span>&#123;</span><br><span class="line">		collection.findOne(&#123;<span class="string">'_id'</span>:<span class="keyword">new</span> BSON.ObjectID(id)&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, item</span>)</span>&#123;</span><br><span class="line">			res.send(item);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.addWine = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> wine = req.body;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Adding wine: '</span> + <span class="built_in">JSON</span>.stringify(wine));</span><br><span class="line">	db.collection(<span class="string">'wines'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</span><br><span class="line">		collection.insert(wine, &#123;safe:<span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (err) &#123;</span><br><span class="line">				res.send(&#123;<span class="string">'error'</span>:<span class="string">'An error has occurred'</span>&#125;);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">'Success: '</span> + <span class="built_in">JSON</span>.stringify(result[<span class="number">0</span>]));</span><br><span class="line">				res.send(result[<span class="number">0</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.updateWine = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> id = req.params.id;</span><br><span class="line">	<span class="keyword">var</span> wine = req.body;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Updating wine: '</span> + id);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(wine));</span><br><span class="line">	db.collection(<span class="string">'wines'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</span><br><span class="line">		collection.update(&#123;<span class="string">'_id'</span>:<span class="keyword">new</span> BSON.ObjectID(id)&#125;, wine, &#123;safe:<span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (err) &#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">'Error updating wine: '</span> + err);</span><br><span class="line">				res.send(&#123;<span class="string">'error'</span>:<span class="string">'An error has occurred'</span>&#125;);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">''</span> + result + <span class="string">' document(s) updated'</span>);</span><br><span class="line">				res.send(wine);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.deleteWine = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> id = req.params.id;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Deleting wine: '</span> + id);</span><br><span class="line">	db.collection(<span class="string">'wines'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</span><br><span class="line">		collection.remove(&#123;<span class="string">'_id'</span>:<span class="keyword">new</span> BSON.ObjectID(id)&#125;, &#123;safe:<span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (err) &#123;</span><br><span class="line">				res.send(&#123;<span class="string">'error'</span>:<span class="string">'An error has occurred - '</span> + err&#125;);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">console</span>.log(<span class="string">''</span> + result + <span class="string">' document(s) deleted'</span>);</span><br><span class="line">				res.send(req.body);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> populateDB = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">var</span> wines = [</span><br><span class="line">	&#123;</span><br><span class="line">		name: <span class="string">"CHATEAU DE SAINT COSME"</span>,</span><br><span class="line">		year: <span class="string">"2009"</span>,</span><br><span class="line">		grapes: <span class="string">"Grenache / Syrah"</span>,</span><br><span class="line">		country: <span class="string">"France"</span>,</span><br><span class="line">		region: <span class="string">"Southern Rhone"</span>,</span><br><span class="line">		description: <span class="string">"The aromas of fruit and spice..."</span>,</span><br><span class="line">		picture: <span class="string">"saint_cosme.jpg"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		name: <span class="string">"LAN RIOJA CRIANZA"</span>,</span><br><span class="line">		year: <span class="string">"2006"</span>,</span><br><span class="line">		grapes: <span class="string">"Tempranillo"</span>,</span><br><span class="line">		country: <span class="string">"Spain"</span>,</span><br><span class="line">		region: <span class="string">"Rioja"</span>,</span><br><span class="line">		description: <span class="string">"A resurgence of interest in boutique vineyards..."</span>,</span><br><span class="line">		picture: <span class="string">"lan_rioja.jpg"</span></span><br><span class="line">	&#125;];</span><br><span class="line"> </span><br><span class="line">	db.collection(<span class="string">'wines'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</span><br><span class="line">		collection.insert(wines, &#123;safe:<span class="literal">true</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>重启服务，测试API接口。</p>
<h4 id="使用cURL测试API">使用cURL测试API</h4><p>重启 server.js 服务，通过浏览器来测试REST服务。在浏览器中输入以下地址：<br><a href="http://localhost:3000/wines" target="_blank" rel="external">http://localhost:3000/wines</a><br>但是，通过浏览器访问只能测试到GET服务，有什么其他的方法可以覆盖到之前我们提供的REST接口吗？使用cURL小工具可以胜任这个工作。<br>例如，使用cURL，通过以下命令，你可以测试 winecell API。</p>
<ul>
<li>获取所有的酒<br>curl -i -X GET <a href="http://localhost:3000/wines" target="_blank" rel="external">http://localhost:3000/wines</a> </li>
<li>获取_id为 5069b47aa892630aae000007 的酒<br>curl -i -X GET <a href="http://localhost:3000/wines/5069b47aa892630aae000007" target="_blank" rel="external">http://localhost:3000/wines/5069b47aa892630aae000007</a> </li>
<li>删除_id为 5069b47aa892630aae000007 的酒<br>curl -i -X DELETE <a href="http://localhost:3000/wines/5069b47aa892630aae000007" target="_blank" rel="external">http://localhost:3000/wines/5069b47aa892630aae000007</a> </li>
<li>添加新酒<br>curl -i -X POST -H ‘Content-Type: application/json’ -d ‘{“name”: “New Wine”, “year”: “2009”}’ <a href="http://localhost:3000/wines" target="_blank" rel="external">http://localhost:3000/wines</a> </li>
<li>修改_id为5069b47aa892630aae000007 的酒的信息<br>curl -i -X PUT -H ‘Content-Type: application/json’ -d ‘{“name”: “New Wine”, “year”: “2010”}’ <a href="http://localhost:3000/wines/5069b47aa892630aae000007" target="_blank" rel="external">http://localhost:3000/wines/5069b47aa892630aae000007</a> </li>
</ul>
<p>原文地址：<a href="http://coenraets.org/blog/2012/10/creating-a-rest-api-using-node-js-express-and-mongodb/" target="_blank" rel="external">http://coenraets.org/blog/2012/10/creating-a-rest-api-using-node-js-express-and-mongodb/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="C:\Users\le\Downloads\nodemango1.jpg" alt="nodeMongo"><br>]]>
    
    </summary>
    
      <category term="Express" scheme="http://science09.github.io/tags/Express/"/>
    
      <category term="MongoDB" scheme="http://science09.github.io/tags/MongoDB/"/>
    
      <category term="Node.js" scheme="http://science09.github.io/tags/Node-js/"/>
    
      <category term="WEB" scheme="http://science09.github.io/categories/WEB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows平台下Node.js的安装]]></title>
    <link href="http://science09.github.io/2014/09/03/Windows%E5%B9%B3%E5%8F%B0%E4%B8%8BNode-js%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>http://science09.github.io/2014/09/03/Windows平台下Node-js的安装/</id>
    <published>2014-09-03T13:31:21.000Z</published>
    <updated>2015-09-10T13:48:39.057Z</updated>
    <content type="html"><![CDATA[<h4 id="1-Windows平台下Node-js的安装">1.Windows平台下Node.js的安装</h4><p>Node.js从V0.6.X的稳定版本后开始支持Windows平台上直接安装，不需要通过Cygwin或MinGW模拟Linux环境。直接到Node.js的官方网站上下载 <a href="http://www.nodejs.org/download/" target="_blank" rel="external">http://www.nodejs.org/download/</a> ,Windows平台上提供两种安装包格式： .msi 和 .exe 。这里我们选择 .msi安装包格式，下载下来后直接安装，无需其他配置，简单快速。<br><a id="more"></a><br>安装完毕后，可以在快速启动栏中找到 “Node.js command prompt” 命令行窗口，单击后调用该窗口，敲入以下命令：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p>
<p>命令行将打印出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v0<span class="number">.10</span><span class="number">.30</span></span><br></pre></td></tr></table></figure></p>
<pre><code><span class="comment">PS：</span> <span class="comment">windows源码安装比价麻烦，如果你喜欢折腾，可以试一试。需要Python环境和VC</span><span class="literal">+</span><span class="literal">+</span><span class="comment">编译器。</span>
</code></pre><p>经过上面的步骤，算是把Nodejs的环境搭建好了。接下来安装Windows下的Node.js包管理工具，Nodejs采用NPM（Node Package Manager）。Nodejs自身提供了基本的模块，但是在这些基本模块上开发实际应用需要较多的工作。所幸的是笔者执笔此文的时候NPM上已经有了5112个Nodejs库或框架，这些库从各个方面可以帮助Nodejs的开发者完成较为复杂的应用。这些库的数量和活跃也从侧面反映出Nodejs社区的发展是十分神速和活跃的。</p>
<h4 id="2-Windows下安装NPM">2.Windows下安装NPM</h4><ul>
<li>安装Git工具<br>由于github网站不支持直接下载打包了所有submodule的源码包，所以需要通过git工具来签出所有的源码。从 <a href="http://code.google.com/p/msysgit/downloads/list" target="_blank" rel="external">http://code.google.com/p/msysgit/downloads/list</a>，可以下载到msysgit这个Windows平台下的git客户端工具，在下载之后双击安装。</li>
<li><p>下载NPM源码<br>打开命令行工具（CMD），执行以下命令，可以通过msysgit检出NPM的所有源码和依赖代码并安装npm。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive git:<span class="comment">//github.com/isaacs/npm.git</span></span><br><span class="line">cd npm</span><br><span class="line">node cli.js install npm -gf</span><br></pre></td></tr></table></figure>
<p>  注：在我的环境中，第一次执行 <figure class="highlight"><figcaption><span>cli.js install npm -gf``` 是失败了，重新在执行一次该命令，成功安装了npm包管理器。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;- &#20351;&#29992;npm&#23433;&#35013;&#27169;&#22359;&#10;```javascript&#10;npm install underscore</span><br></pre></td></tr></table></figure></p>
</li>
</ul>
<p>安装结果如下图所示：<br><img src="C:\Users\le\Pictures\npm_install_2.png" alt=""><br>至此，Windows下的npm安装完毕。</p>
<h4 id="3-Nodejs编程初体验">3.Nodejs编程初体验</h4><p>编写一个简单的HTTP服务器模块，用于体验Nodejs的编程，同时也测试一下开发环境的搭建是否成功。在你的项目根文件夹下创建一个server.js的文件，并敲入以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">	response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</span><br><span class="line">    response.write(<span class="string">"Hello World"</span>);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure>
<p>一个简单的HTTP服务器完成了，为了证明这一点，我们来运行并且测试这段代码。首先，用Node.js执行你的脚本：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure></p>
<p>接下来，打开浏览器访问 <a href="http://localhost:8888/" target="_blank" rel="external">http://localhost:8888/</a> ，你会看到一个写着“Hello World”的网页。</p>
<p><strong>分析HTTP服务器</strong></p>
<p>接下来，让我们分析一下这个HTTP服务器的构成。第一行请求（require）Node.js自带的 http 模块，并且把它赋值给 http 变量。接下来调用http模块提供的函数： createServer 。这个函数会返回一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数，用于指定这个HTTP服务器监听的端口号。咱们暂时先不管 http.createServer 的括号里的那个函数定义。<br>我们本来可以用这样的代码来启动服务器并侦听8888端口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line">server.listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure></p>
<p>这段代码只会启动一个侦听8888端口的服务器，它不做任何别的事情，甚至连请求都不会应答。<br>在示例代码中，你会发现在creatServer()函数中，直接定义了一个函数。实际上，这个函数定义是 createServer() 的第一个也是唯一一个参数。因为在JavaScript中，函数和其他变量一样都是可以被传递的。</p>
<p><strong>进行函数传递</strong></p>
<p>举例来说，你可以这样做：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>) </span>&#123;</span><br><span class="line">    someFunction(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute(say, <span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure></p>
<p>请仔细阅读这段代码！在这里，我们把 say 函数作为execute函数的第一个变量进行了传递。这里返回的不是 say 的返回值，而是 say 本身！这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。</p>
<p>我们可以，就像刚才那样，用它的名字把一个函数作为变量传递。但是我们不一定要绕这个“先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>) </span>&#123;</span><br><span class="line">    someFunction(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">execute(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123; <span class="built_in">console</span>.log(word) &#125;, <span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure>
<p>我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做 <strong>匿名函数</strong> 。</p>
<p>这是我们和我所认为的“进阶”JavaScript的第一次亲密接触，不过我们还是得循序渐进。现在，我们先接受这一点：在JavaScript中，一个函数可以作为另一个函数接收一个参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。</p>
<p>我们可以把上面的代码改写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Request received."</span>);</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>&#125;);</span><br><span class="line">    response.write(<span class="string">"Hello World"</span>);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</span><br></pre></td></tr></table></figure></p>
<p>接着，再来分析匿名函数内的实现。当收到请求时，console.log向标准输出输出一串字符串（Request received.），使用 response.writeHead() 函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 response.write() 函数在HTTP相应主体中发送文本“Hello World”。最后，我们调用 response.end() 完成响应。</p>
<h4 id="4-结尾">4.结尾</h4><p>经过上面的学习，完成了Nodejs开发环境的搭建并通过少数几行代码就可以编写一个简单的HTTP服务器，了解了Nodejs的匿名函数，这是nodejs有别于其他脚本语言（如Python，PHP）的地方。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="1-Windows平台下Node-js的安装">1.Windows平台下Node.js的安装</h4><p>Node.js从V0.6.X的稳定版本后开始支持Windows平台上直接安装，不需要通过Cygwin或MinGW模拟Linux环境。直接到Node.js的官方网站上下载 <a href="http://www.nodejs.org/download/">http://www.nodejs.org/download/</a> ,Windows平台上提供两种安装包格式： .msi 和 .exe 。这里我们选择 .msi安装包格式，下载下来后直接安装，无需其他配置，简单快速。<br>]]>
    
    </summary>
    
      <category term="Node.js" scheme="http://science09.github.io/tags/Node-js/"/>
    
      <category term="WEB" scheme="http://science09.github.io/categories/WEB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Hexo在GitHub上搭建自己的博客]]></title>
    <link href="http://science09.github.io/2014/08/11/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://science09.github.io/2014/08/11/使用Hexo在GitHub上搭建自己的博客/</id>
    <published>2014-08-11T14:12:38.000Z</published>
    <updated>2015-09-10T14:13:14.656Z</updated>
    <content type="html"><![CDATA[<h3 id="Hexo模块安装">Hexo模块安装</h3><a id="more"></a>
<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">le</span>&gt;<span class="title">node</span> -<span class="title">v</span></span><br><span class="line"><span class="title">v0</span>.10.30</span><br><span class="line"></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>&gt;</span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>&gt;<span class="title">npm</span> -<span class="title">v</span></span><br><span class="line">1.4.23</span><br><span class="line"></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>&gt;<span class="title">npm</span> <span class="title">install</span> -<span class="title">g</span> <span class="title">hexo</span></span><br><span class="line"><span class="title">npm</span> <span class="title">WARN</span> <span class="title">optional</span> <span class="title">dep</span> <span class="title">failed</span>, <span class="title">continuing</span> <span class="title">fsevents</span>@0.2.0</span><br><span class="line"><span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">hexo</span> -&gt; <span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">node_modules</span>\<span class="title">hexo</span>\<span class="title">bin</span>\<span class="title">he</span></span><br><span class="line"><span class="title">xo</span></span><br><span class="line"><span class="title">hexo</span>@2.8.2 <span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">node_modules</span>\<span class="title">hexo</span></span><br><span class="line">├── <span class="title">hexo</span>-<span class="title">front</span>-<span class="title">matter</span>@0.0.4</span><br><span class="line">├── <span class="title">strip</span>-<span class="title">indent</span>@0.1.3</span><br><span class="line">├── <span class="title">sprintf</span>-<span class="title">js</span>@0.0.7</span><br><span class="line">├── <span class="title">graceful</span>-<span class="title">fs</span>@3.0.2</span><br><span class="line">├── <span class="title">colors</span>@0.6.2</span><br><span class="line">├── <span class="title">mime</span>@1.2.11</span><br><span class="line">├── <span class="title">async</span>@0.9.0</span><br><span class="line">├── <span class="title">minimist</span>@0.2.0</span><br><span class="line">├── <span class="title">lodash</span>@2.4.1</span><br><span class="line">├── <span class="title">highlight.js</span>@8.1.0</span><br><span class="line">├── <span class="title">warehouse</span>@0.2.2 (<span class="title">async</span>@0.7.0)</span><br><span class="line">├── <span class="title">moment</span>@2.8.1</span><br><span class="line">├── <span class="title">chokidar</span>@0.8.2 (<span class="title">recursive</span>-<span class="title">readdir</span>@0.0.2)</span><br><span class="line">├── <span class="title">morgan</span>@1.2.2 (<span class="title">basic</span>-<span class="title">auth</span>@1.0.0, <span class="title">bytes</span>@1.0.0, <span class="title">depd</span>@0.4.4, <span class="title">finished</span>@1.2.2)</span><br><span class="line">├── <span class="title">connect</span>@3.1.0 (<span class="title">parseurl</span>@1.2.0, <span class="title">utils</span>-<span class="title">merge</span>@1.0.0, <span class="title">finalhandler</span>@0.1.0, <span class="title">deb</span></span><br><span class="line"><span class="title">ug</span>@1.0.4)</span><br><span class="line">├── <span class="title">compression</span>@1.0.10 (<span class="title">vary</span>@0.1.0, <span class="title">bytes</span>@1.0.0, <span class="title">on</span>-<span class="title">headers</span>@0.0.0, <span class="title">compressib</span></span><br><span class="line"><span class="title">le</span>@1.1.1, <span class="title">accepts</span>@1.0.7, <span class="title">debug</span>@1.0.4)</span><br><span class="line">├── <span class="title">serve</span>-<span class="title">static</span>@1.5.1 (<span class="title">utils</span>-<span class="title">merge</span>@1.0.0, <span class="title">parseurl</span>@1.3.0, <span class="title">escape</span>-<span class="title">html</span>@1.0.1,</span><br><span class="line"> <span class="title">send</span>@0.8.1)</span><br><span class="line">├── <span class="title">cheerio</span>@0.17.0 (<span class="title">entities</span>@1.1.1, <span class="title">dom</span>-<span class="title">serializer</span>@0.0.1, <span class="title">CSSselect</span>@0.4.1, <span class="title">ht</span></span><br><span class="line"><span class="title">mlparser2</span>@3.7.3)</span><br><span class="line">├── <span class="title">swig</span>@1.4.1 (<span class="title">optimist</span>@0.6.1, <span class="title">uglify</span>-<span class="title">js</span>@2.4.15)</span><br><span class="line">└── <span class="title">js</span>-<span class="title">yaml</span>@3.1.0 (<span class="title">esprima</span>@1.0.4, <span class="title">argparse</span>@0.1.15)</span><br><span class="line"></span><br><span class="line"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">le</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>查看Hexo版本：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">le</span>&gt;<span class="title">hexo</span> <span class="title">version</span></span><br><span class="line"><span class="title">hexo</span>: 2.8.2</span><br><span class="line"><span class="title">os</span>: <span class="title">Windows_NT</span> 6.1.7601 <span class="title">win32</span> <span class="title">ia32</span></span><br><span class="line"><span class="title">http_parser</span>: 1.0</span><br><span class="line"><span class="title">node</span>: 0.10.30</span><br><span class="line"><span class="title">v8</span>: 3.14.5.9</span><br><span class="line"><span class="title">ares</span>: 1.9.0-<span class="title">DEV</span></span><br><span class="line"><span class="title">uv</span>: 0.10.28</span><br><span class="line"><span class="title">zlib</span>: 1.2.3</span><br><span class="line"><span class="title">modules</span>: 11</span><br><span class="line"><span class="title">openssl</span>: 1.0.1<span class="title">h</span></span></span><br></pre></td></tr></table></figure></p>
<p>安装好了之后，我们就可以使用Hexo创建博客项目了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\le&gt;cd nodejs-hexo</span><br><span class="line"></span><br><span class="line">C:\Users\le\nodejs-hexo&gt;dir</span><br><span class="line"> 驱动器 C 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 <span class="number">4</span>C3C-<span class="number">47</span>CE</span><br><span class="line"></span><br><span class="line"> C:\Users\le\nodejs-hexo 的目录</span><br><span class="line"></span><br><span class="line"><span class="number">2014</span>/<span class="number">08</span>/<span class="number">11</span>  <span class="number">07</span>:<span class="number">06</span>    &lt;DIR&gt;          .</span><br><span class="line"><span class="number">2014</span>/<span class="number">08</span>/<span class="number">11</span>  <span class="number">07</span>:<span class="number">06</span>    &lt;DIR&gt;          ..</span><br><span class="line"><span class="number">2014</span>/<span class="number">08</span>/<span class="number">11</span>  <span class="number">07</span>:<span class="number">06</span>                <span class="number">68</span> .gitignore</span><br><span class="line"><span class="number">2014</span>/<span class="number">08</span>/<span class="number">11</span>  <span class="number">07</span>:<span class="number">06</span>               <span class="number">181</span> package.json</span><br><span class="line"><span class="number">2014</span>/<span class="number">08</span>/<span class="number">11</span>  <span class="number">07</span>:<span class="number">06</span>    &lt;DIR&gt;          scaffolds</span><br><span class="line"><span class="number">2014</span>/<span class="number">08</span>/<span class="number">11</span>  <span class="number">07</span>:<span class="number">06</span>    &lt;DIR&gt;          source</span><br><span class="line"><span class="number">2014</span>/<span class="number">08</span>/<span class="number">11</span>  <span class="number">07</span>:<span class="number">06</span>    &lt;DIR&gt;          themes</span><br><span class="line"><span class="number">2014</span>/<span class="number">08</span>/<span class="number">11</span>  <span class="number">07</span>:<span class="number">06</span>             <span class="number">1</span>,<span class="number">819</span> _config.yml</span><br><span class="line">               <span class="number">3</span> 个文件          <span class="number">2</span>,<span class="number">068</span> 字节</span><br><span class="line">               <span class="number">5</span> 个目录  <span class="number">5</span>,<span class="number">002</span>,<span class="number">711</span>,<span class="number">040</span> 可用字节</span><br><span class="line"></span><br><span class="line">C:\Users\le\nodejs-hexo&gt;npm install</span><br><span class="line">hexo-renderer-ejs@<span class="number">0.1</span><span class="number">.0</span> node_modules\hexo-renderer-ejs</span><br><span class="line">├── ejs@<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">└── lodash@<span class="number">2.4</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">hexo-renderer-marked@<span class="number">0.1</span><span class="number">.0</span> node_modules\hexo-renderer-marked</span><br><span class="line">├── marked@<span class="number">0.3</span><span class="number">.2</span></span><br><span class="line">└── lodash@<span class="number">2.4</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">hexo-renderer-stylus@<span class="number">0.1</span><span class="number">.0</span> node_modules\hexo-renderer-stylus</span><br><span class="line">├── nib@<span class="number">1.0</span><span class="number">.3</span> (stylus@<span class="number">0.37</span><span class="number">.0</span>)</span><br><span class="line">└── stylus@<span class="number">0.44</span><span class="number">.0</span> (css-parse@<span class="number">1.7</span><span class="number">.0</span>, mkdirp@<span class="number">0.3</span><span class="number">.5</span>, sax@<span class="number">0.5</span><span class="number">.8</span>, debug@<span class="number">1.0</span><span class="number">.4</span>, glo</span><br><span class="line">b@<span class="number">3.2</span><span class="number">.11</span>)</span><br><span class="line"></span><br><span class="line">C:\Users\le\nodejs-hexo&gt;</span><br></pre></td></tr></table></figure>
<p>启动Hexo服务器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\le\nodejs-hexo&gt;hexo server</span><br><span class="line">[info] Hexo is running at http:<span class="comment">//localhost:4000/. Press Ctrl+C to stop.</span></span><br></pre></td></tr></table></figure></p>
<p>这时端口4000被打开了，我们能过浏览器打开地址，<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br><img src="D:\学习资料\建站资料\博客文章\PicResource\hexo-blog.png" alt=""></p>
<h3 id="Hexo的使用">Hexo的使用</h3>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Hexo模块安装">Hexo模块安装</h3>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://science09.github.io/tags/Hexo/"/>
    
      <category term="github" scheme="http://science09.github.io/tags/github/"/>
    
      <category term="博客" scheme="http://science09.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="WEB" scheme="http://science09.github.io/categories/WEB/"/>
    
  </entry>
  
</feed>
